// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class MAMultiPolyline extends MAPolyline with MAOverlay, MAAnnotation {
  //region constants
  static const String name__ = 'MAMultiPolyline';

  
  //endregion

  //region creators
  static Future<MAMultiPolyline> create__() async {
    final int refId = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('ObjectFactory::createMAMultiPolyline');
    final object = MAMultiPolyline()..refId = refId..tag__ = 'amap_map_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<MAMultiPolyline>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('ObjectFactory::create_batchMAMultiPolyline', {'length': length});
  
    final List<MAMultiPolyline> typedResult = resultBatch.map((result) => MAMultiPolyline()..refId = result..tag__ = 'amap_map_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  Future<List<num>> get_drawStyleIndexes() async {
    final __result__ = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod("MAMultiPolyline::get_drawStyleIndexes", {'refId': refId});
  
    return (__result__ as List).cast<num>();
  }
  
  //endregion

  //region setters
  Future<void> set_drawStyleIndexes(List<num> drawStyleIndexes) async {
    await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('MAMultiPolyline::set_drawStyleIndexes', {'refId': refId, "drawStyleIndexes": drawStyleIndexes});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}

extension MAMultiPolyline_Batch on List<MAMultiPolyline> {
  //region getters
  Future<List<List<num>>> get_drawStyleIndexes_batch() async {
    final resultBatch = await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod("MAMultiPolyline::get_drawStyleIndexes_batch", [for (final __item__ in this) {'refId': __item__.refId}]);
    final typedResult = (resultBatch as List).cast<List<num>>().map((__result__) => (__result__ as List).cast<num>()).toList();
  
    return typedResult;
  }
  
  //endregion

  //region setters
  Future<void> set_drawStyleIndexes_batch(List<List<num>> drawStyleIndexes) async {
    await MethodChannel('me.yohom/amap_map_fluttify').invokeMethod('MAMultiPolyline::set_drawStyleIndexes_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'refId': this[__i__].refId, "drawStyleIndexes": drawStyleIndexes[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}