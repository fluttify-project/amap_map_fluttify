// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_map_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';



mixin MATraceDelegate on NSObject {
  

  

  

  

  @mustCallSuper
  Future<void> traceManager_didTrace_correct_distance_withError(MATraceManager manager, List<CLLocation> locations, List<MATracePoint> tracePoints, double distance, NSError error) {
    if (manager is Ref) kNativeObjectPool.add(manager);
    kNativeObjectPool.addAll(locations);
    kNativeObjectPool.addAll(tracePoints);
    if (error is Ref) kNativeObjectPool.add(error);
  
    if (fluttifyLogEnabled) {
      debugPrint('traceManager_didTrace_correct_distance_withError::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
  @mustCallSuper
  Future<void> mapViewRequireLocationAuth(CLLocationManager locationManager) {
    if (locationManager is Ref) kNativeObjectPool.add(locationManager);
  
    if (fluttifyLogEnabled) {
      debugPrint('mapViewRequireLocationAuth::kNativeObjectPool: $kNativeObjectPool');
    }
  }
  
}

