//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler0.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapMapFluttifyPlugin (SubHandler0)
- (NSDictionary<NSString*, Handler>*) getSubHandler0 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"MAGroundOverlay::groundOverlayWithBounds_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* boundsValue = (NSValue*) HEAP[args[@"bounds"]];
            MACoordinateBounds bounds;
            [boundsValue getValue:&bounds];
            // ref arg
            UIImage* icon = (UIImage*) HEAP[args[@"icon"]];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAGroundOverlay::groundOverlayWithBounds(%@, %@)", args[@"bounds"], args[@"icon"]);
            }
        
            // invoke native method
            MAGroundOverlay* result = [MAGroundOverlay groundOverlayWithBounds: bounds icon: icon];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAGroundOverlay::groundOverlayWithCoordinate_zoomLevel_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[args[@"coordinate"]];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // jsonable arg
            CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
            // ref arg
            UIImage* icon = (UIImage*) HEAP[args[@"icon"]];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAGroundOverlay::groundOverlayWithCoordinate(%@, %@, %@)", args[@"coordinate"], args[@"zoomLevel"], args[@"icon"]);
            }
        
            // invoke native method
            MAGroundOverlay* result = [MAGroundOverlay groundOverlayWithCoordinate: coordinate zoomLevel: zoomLevel icon: icon];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAGroundOverlay::setGroundOverlayWithBounds_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* boundsValue = (NSValue*) HEAP[args[@"bounds"]];
            MACoordinateBounds bounds;
            [boundsValue getValue:&bounds];
            // ref arg
            UIImage* icon = (UIImage*) HEAP[args[@"icon"]];
        
            // ref
            MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAGroundOverlay@%@::setGroundOverlayWithBounds(%@, %@)", args[@"refId"], args[@"bounds"], args[@"icon"]);
            }
        
            // invoke native method
            BOOL result = [ref setGroundOverlayWithBounds: bounds icon: icon];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAGroundOverlay::setGroundOverlayWithCoordinate_zoomLevel_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[args[@"coordinate"]];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // jsonable arg
            CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
            // ref arg
            UIImage* icon = (UIImage*) HEAP[args[@"icon"]];
        
            // ref
            MAGroundOverlay* ref = (MAGroundOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAGroundOverlay@%@::setGroundOverlayWithCoordinate(%@, %@, %@)", args[@"refId"], args[@"coordinate"], args[@"zoomLevel"], args[@"icon"]);
            }
        
            // invoke native method
            BOOL result = [ref setGroundOverlayWithCoordinate: coordinate zoomLevel: zoomLevel icon: icon];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAPolygonRenderer::initWithPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAPolygon* polygon = (MAPolygon*) HEAP[args[@"polygon"]];
        
            // ref
            MAPolygonRenderer* ref = (MAPolygonRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAPolygonRenderer@%@::initWithPolygon(%@)", args[@"refId"], args[@"polygon"]);
            }
        
            // invoke native method
            MAPolygonRenderer* result = [ref initWithPolygon: polygon];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAHeatMapGradient::initWithColor_andWithStartPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSNumber*>* colorsRefArray = (NSArray<NSNumber*> *) args[@"colors"];
            NSMutableArray<UIColor*>* colors = [NSMutableArray arrayWithCapacity:colorsRefArray.count];
            for (int __i__ = 0; __i__ < colorsRefArray.count; __i__++) {
                UIColor* item = (UIColor*) HEAP[[colorsRefArray objectAtIndex:__i__]];
                [colors addObject:item];
            }
            // jsonable arg
            NSArray<NSNumber*>* startPoints = (NSArray<NSNumber*>*) args[@"startPoints"];
        
            // ref
            MAHeatMapGradient* ref = (MAHeatMapGradient*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAHeatMapGradient@%@::initWithColor(%@, %@)", args[@"refId"], args[@"colors"], args[@"startPoints"]);
            }
        
            // invoke native method
            MAHeatMapGradient* result = [ref initWithColor: colors andWithStartPoints: startPoints];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapStatus::statusWithCenterCoordinate_zoomLevel_rotationDegree_cameraDegree_screenAnchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[args[@"coordinate"]];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // jsonable arg
            CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
            // jsonable arg
            CGFloat rotationDegree = [args[@"rotationDegree"] floatValue];
            // jsonable arg
            CGFloat cameraDegree = [args[@"cameraDegree"] floatValue];
            // struct arg
            NSValue* screenAnchorValue = (NSValue*) HEAP[args[@"screenAnchor"]];
            CGPoint screenAnchor;
            [screenAnchorValue getValue:&screenAnchor];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapStatus::statusWithCenterCoordinate(%@, %@, %@, %@, %@)", args[@"coordinate"], args[@"zoomLevel"], args[@"rotationDegree"], args[@"cameraDegree"], args[@"screenAnchor"]);
            }
        
            // invoke native method
            MAMapStatus* result = [MAMapStatus statusWithCenterCoordinate: coordinate zoomLevel: zoomLevel rotationDegree: rotationDegree cameraDegree: cameraDegree screenAnchor: screenAnchor];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapStatus::initWithCenterCoordinate_zoomLevel_rotationDegree_cameraDegree_screenAnchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[args[@"coordinate"]];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // jsonable arg
            CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
            // jsonable arg
            CGFloat rotationDegree = [args[@"rotationDegree"] floatValue];
            // jsonable arg
            CGFloat cameraDegree = [args[@"cameraDegree"] floatValue];
            // struct arg
            NSValue* screenAnchorValue = (NSValue*) HEAP[args[@"screenAnchor"]];
            CGPoint screenAnchor;
            [screenAnchorValue getValue:&screenAnchor];
        
            // ref
            MAMapStatus* ref = (MAMapStatus*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapStatus@%@::initWithCenterCoordinate(%@, %@, %@, %@, %@)", args[@"refId"], args[@"coordinate"], args[@"zoomLevel"], args[@"rotationDegree"], args[@"cameraDegree"], args[@"screenAnchor"]);
            }
        
            // invoke native method
            id result = [ref initWithCenterCoordinate: coordinate zoomLevel: zoomLevel rotationDegree: rotationDegree cameraDegree: cameraDegree screenAnchor: screenAnchor];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: ((NSObject*) result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: ((NSObject*) result).hash];
        
            methodResult(jsonableResult);
        },
        @"MACircle::circleWithCenterCoordinate_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordValue = (NSValue*) HEAP[args[@"coord"]];
            CLLocationCoordinate2D coord;
            [coordValue getValue:&coord];
            // jsonable arg
            CLLocationDistance radius = [args[@"radius"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACircle::circleWithCenterCoordinate(%@, %@)", args[@"coord"], args[@"radius"]);
            }
        
            // invoke native method
            MACircle* result = [MACircle circleWithCenterCoordinate: coord radius: radius];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MACircle::circleWithMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) HEAP[args[@"mapRect"]];
            MAMapRect mapRect;
            [mapRectValue getValue:&mapRect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACircle::circleWithMapRect(%@)", args[@"mapRect"]);
            }
        
            // invoke native method
            MACircle* result = [MACircle circleWithMapRect: mapRect];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MACircle::setCircleWithCenterCoordinate_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordValue = (NSValue*) HEAP[args[@"coord"]];
            CLLocationCoordinate2D coord;
            [coordValue getValue:&coord];
            // jsonable arg
            CLLocationDistance radius = [args[@"radius"] doubleValue];
        
            // ref
            MACircle* ref = (MACircle*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACircle@%@::setCircleWithCenterCoordinate(%@, %@)", args[@"refId"], args[@"coord"], args[@"radius"]);
            }
        
            // invoke native method
            BOOL result = [ref setCircleWithCenterCoordinate: coord radius: radius];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAArcRenderer::initWithArc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAArc* arc = (MAArc*) HEAP[args[@"arc"]];
        
            // ref
            MAArcRenderer* ref = (MAArcRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAArcRenderer@%@::initWithArc(%@)", args[@"refId"], args[@"arc"]);
            }
        
            // invoke native method
            MAArcRenderer* result = [ref initWithArc: arc];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAAnnotation::setCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* newCoordinateValue = (NSValue*) HEAP[args[@"newCoordinate"]];
            CLLocationCoordinate2D newCoordinate;
            [newCoordinateValue getValue:&newCoordinate];
        
            // ref
            id<MAAnnotation> ref = (id<MAAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnnotation@%@::setCoordinate(%@)", args[@"refId"], args[@"newCoordinate"]);
            }
        
            // invoke native method
            [ref setCoordinate : newCoordinate];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAAnimatableAnnotation::step": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CGFloat timeDelta = [args[@"timeDelta"] floatValue];
        
            // ref
            id<MAAnimatableAnnotation> ref = (id<MAAnimatableAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnimatableAnnotation@%@::step(%@)", args[@"refId"], args[@"timeDelta"]);
            }
        
            // invoke native method
            [ref step : timeDelta];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAAnimatableAnnotation::isAnimationFinished": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            id<MAAnimatableAnnotation> ref = (id<MAAnimatableAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnimatableAnnotation@%@::isAnimationFinished()", args[@"refId"]);
            }
        
            // invoke native method
            BOOL result = [ref isAnimationFinished];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAAnimatableAnnotation::shouldAnimationStart": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            id<MAAnimatableAnnotation> ref = (id<MAAnimatableAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnimatableAnnotation@%@::shouldAnimationStart()", args[@"refId"]);
            }
        
            // invoke native method
            BOOL result = [ref shouldAnimationStart];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAAnimatableAnnotation::rotateDegree": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            id<MAAnimatableAnnotation> ref = (id<MAAnimatableAnnotation>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnimatableAnnotation@%@::rotateDegree()", args[@"refId"]);
            }
        
            // invoke native method
            CLLocationDirection result = [ref rotateDegree];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAOfflineMapViewController::sharedInstance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOfflineMapViewController::sharedInstance()");
            }
        
            // invoke native method
            MAOfflineMapViewController* result = [MAOfflineMapViewController sharedInstance];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAPolygon::polygonWithCoordinates_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < coordsRefIdArray.count; __i__++) {
                NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:__i__]];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAPolygon::polygonWithCoordinates(%@, %@)", args[@"coords"], args[@"count"]);
            }
        
            // invoke native method
            MAPolygon* result = [MAPolygon polygonWithCoordinates: coords count: count];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAPolygon::polygonWithPoints_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
            MAMapPoint points[pointsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < pointsRefIdArray.count; __i__++) {
                NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:__i__]];
                MAMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAPolygon::polygonWithPoints(%@, %@)", args[@"points"], args[@"count"]);
            }
        
            // invoke native method
            MAPolygon* result = [MAPolygon polygonWithPoints: points count: count];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAPolygon::setPolygonWithPoints_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
            MAMapPoint points[pointsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < pointsRefIdArray.count; __i__++) {
                NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:__i__]];
                MAMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            MAPolygon* ref = (MAPolygon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAPolygon@%@::setPolygonWithPoints(%@, %@)", args[@"refId"], args[@"points"], args[@"count"]);
            }
        
            // invoke native method
            BOOL result = [ref setPolygonWithPoints: points count: count];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAPolygon::setPolygonWithCoordinates_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < coordsRefIdArray.count; __i__++) {
                NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:__i__]];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            MAPolygon* ref = (MAPolygon*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAPolygon@%@::setPolygonWithCoordinates(%@, %@)", args[@"refId"], args[@"coords"], args[@"count"]);
            }
        
            // invoke native method
            BOOL result = [ref setPolygonWithCoordinates: coords count: count];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAParticleOverlay::particleOverlayWithOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAParticleOverlayOptions* option = (MAParticleOverlayOptions*) HEAP[args[@"option"]];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleOverlay::particleOverlayWithOption(%@)", args[@"option"]);
            }
        
            // invoke native method
            MAParticleOverlay* result = [MAParticleOverlay particleOverlayWithOption: option];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAParticleOverlay::updateOverlayOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAParticleOverlayOptions* overlayOption = (MAParticleOverlayOptions*) HEAP[args[@"overlayOption"]];
        
            // ref
            MAParticleOverlay* ref = (MAParticleOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleOverlay@%@::updateOverlayOption(%@)", args[@"refId"], args[@"overlayOption"]);
            }
        
            // invoke native method
            [ref updateOverlayOption : overlayOption];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAPolyline::polylineWithPoints_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
            MAMapPoint points[pointsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < pointsRefIdArray.count; __i__++) {
                NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:__i__]];
                MAMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAPolyline::polylineWithPoints(%@, %@)", args[@"points"], args[@"count"]);
            }
        
            // invoke native method
            MAPolyline* result = [MAPolyline polylineWithPoints: points count: count];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAPolyline::polylineWithCoordinates_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < coordsRefIdArray.count; __i__++) {
                NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:__i__]];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAPolyline::polylineWithCoordinates(%@, %@)", args[@"coords"], args[@"count"]);
            }
        
            // invoke native method
            MAPolyline* result = [MAPolyline polylineWithCoordinates: coords count: count];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAPolyline::setPolylineWithPoints_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
            MAMapPoint points[pointsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < pointsRefIdArray.count; __i__++) {
                NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:__i__]];
                MAMapPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            MAPolyline* ref = (MAPolyline*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAPolyline@%@::setPolylineWithPoints(%@, %@)", args[@"refId"], args[@"points"], args[@"count"]);
            }
        
            // invoke native method
            BOOL result = [ref setPolylineWithPoints: points count: count];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAPolyline::setPolylineWithCoordinates_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < coordsRefIdArray.count; __i__++) {
                NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:__i__]];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
            // jsonable arg
            NSInteger count = [args[@"count"] longValue];
        
            // ref
            MAPolyline* ref = (MAPolyline*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAPolyline@%@::setPolylineWithCoordinates(%@, %@)", args[@"refId"], args[@"coords"], args[@"count"]);
            }
        
            // invoke native method
            BOOL result = [ref setPolylineWithCoordinates: coords count: count];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMultiColoredPolylineRenderer::initWithMultiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAMultiPolyline* multiPolyline = (MAMultiPolyline*) HEAP[args[@"multiPolyline"]];
        
            // ref
            MAMultiColoredPolylineRenderer* ref = (MAMultiColoredPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMultiColoredPolylineRenderer@%@::initWithMultiPolyline(%@)", args[@"refId"], args[@"multiPolyline"]);
            }
        
            // invoke native method
            MAMultiColoredPolylineRenderer* result = [ref initWithMultiPolyline: multiPolyline];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAAnimatedAnnotation::addMoveAnimationWithKeyCoordinates_count_withDuration_withName_completeCallback": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* coordinatesRefIdArray = (NSArray*) args[@"coordinates"];
            CLLocationCoordinate2D coordinates[coordinatesRefIdArray.count];
        
            for (int __i__ = 0; __i__ < coordinatesRefIdArray.count; __i__++) {
                NSValue* coordinatesValue = (NSValue*) HEAP[[coordinatesRefIdArray objectAtIndex:__i__]];
                CLLocationCoordinate2D coordinatesItem;
                [coordinatesValue getValue:&coordinatesItem];
                coordinates[__i__] = coordinatesItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
            // jsonable arg
            CGFloat duration = [args[@"duration"] floatValue];
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
        
            // ref
            MAAnimatedAnnotation* ref = (MAAnimatedAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnimatedAnnotation@%@::addMoveAnimationWithKeyCoordinates(%@, %@, %@, %@, %@)", args[@"refId"], args[@"coordinates"], args[@"count"], args[@"duration"], args[@"name"], args[@"completeCallback"]);
            }
        
            // invoke native method
            MAAnnotationMoveAnimation* result = [ref addMoveAnimationWithKeyCoordinates: coordinates count: count withDuration: duration withName: name completeCallback: ^(BOOL isFinished) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                    methodChannelWithName:@"void|BOOL#isFinished::Callback"
                          binaryMessenger:[[weakSelf registrar] messenger]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // primitive callback arg
                NSNumber* argisFinished = @(isFinished);
        
                dispatch_async(dispatch_get_main_queue(), ^{
                    [channel invokeMethod:@"Callback::void|BOOL#isFinished::void|BOOL#isFinished" arguments:@{@"isFinished": argisFinished}];
                });
        
            }];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAAnimatedAnnotation::addMoveAnimationWithKeyCoordinates_count_withDuration_withName_completeCallback_stepCallback": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* coordinatesRefIdArray = (NSArray*) args[@"coordinates"];
            CLLocationCoordinate2D coordinates[coordinatesRefIdArray.count];
        
            for (int __i__ = 0; __i__ < coordinatesRefIdArray.count; __i__++) {
                NSValue* coordinatesValue = (NSValue*) HEAP[[coordinatesRefIdArray objectAtIndex:__i__]];
                CLLocationCoordinate2D coordinatesItem;
                [coordinatesValue getValue:&coordinatesItem];
                coordinates[__i__] = coordinatesItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
            // jsonable arg
            CGFloat duration = [args[@"duration"] floatValue];
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
        
        
            // ref
            MAAnimatedAnnotation* ref = (MAAnimatedAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnimatedAnnotation@%@::addMoveAnimationWithKeyCoordinates(%@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"coordinates"], args[@"count"], args[@"duration"], args[@"name"], args[@"completeCallback"], args[@"stepCallback"]);
            }
        
            // invoke native method
            MAAnnotationMoveAnimation* result = [ref addMoveAnimationWithKeyCoordinates: coordinates count: count withDuration: duration withName: name completeCallback: ^(BOOL isFinished) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                    methodChannelWithName:@"void|BOOL#isFinished::Callback"
                          binaryMessenger:[[weakSelf registrar] messenger]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // primitive callback arg
                NSNumber* argisFinished = @(isFinished);
        
                dispatch_async(dispatch_get_main_queue(), ^{
                    [channel invokeMethod:@"Callback::void|BOOL#isFinished::void|BOOL#isFinished" arguments:@{@"isFinished": argisFinished}];
                });
        
            } stepCallback: ^(MAAnnotationMoveAnimation* currentAni) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                    methodChannelWithName:@"void|MAAnnotationMoveAnimation*#currentAni::Callback"
                          binaryMessenger:[[weakSelf registrar] messenger]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // ref callback arg
                NSNumber* argcurrentAni = [NSNull null];
                if (currentAni != nil) {
                    argcurrentAni = [NSNumber numberWithLong: currentAni.hash];
                    HEAP[argcurrentAni] = currentAni;
                }
        
        
                dispatch_async(dispatch_get_main_queue(), ^{
                    [channel invokeMethod:@"Callback::void|MAAnnotationMoveAnimation*#currentAni::void|MAAnnotationMoveAnimation*#currentAni" arguments:@{@"currentAni": argcurrentAni}];
                });
        
            }];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAAnimatedAnnotation::allMoveAnimations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAAnimatedAnnotation* ref = (MAAnimatedAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnimatedAnnotation@%@::allMoveAnimations()", args[@"refId"]);
            }
        
            // invoke native method
            NSArray<MAAnnotationMoveAnimation*>* result = [ref allMoveAnimations];
        
            // result
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        @"MAAnimatedAnnotation::setNeedsStart": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAAnimatedAnnotation* ref = (MAAnimatedAnnotation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnimatedAnnotation@%@::setNeedsStart()", args[@"refId"]);
            }
        
            // invoke native method
            [ref setNeedsStart ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMultiTexturePolylineRenderer::initWithMultiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAMultiPolyline* multiPolyline = (MAMultiPolyline*) HEAP[args[@"multiPolyline"]];
        
            // ref
            MAMultiTexturePolylineRenderer* ref = (MAMultiTexturePolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMultiTexturePolylineRenderer@%@::initWithMultiPolyline(%@)", args[@"refId"], args[@"multiPolyline"]);
            }
        
            // invoke native method
            MAMultiTexturePolylineRenderer* result = [ref initWithMultiPolyline: multiPolyline];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAMultiTexturePolylineRenderer::loadStrokeTextureImages": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSNumber*>* textureImagesRefArray = (NSArray<NSNumber*> *) args[@"textureImages"];
            NSMutableArray<NSObject*>* textureImages = [NSMutableArray arrayWithCapacity:textureImagesRefArray.count];
            for (int __i__ = 0; __i__ < textureImagesRefArray.count; __i__++) {
                NSObject* item = (NSObject*) HEAP[[textureImagesRefArray objectAtIndex:__i__]];
                [textureImages addObject:item];
            }
        
            // ref
            MAMultiTexturePolylineRenderer* ref = (MAMultiTexturePolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMultiTexturePolylineRenderer@%@::loadStrokeTextureImages(%@)", args[@"refId"], args[@"textureImages"]);
            }
        
            // invoke native method
            BOOL result = [ref loadStrokeTextureImages: textureImages];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MATileOverlayRenderer::initWithTileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MATileOverlay* tileOverlay = (MATileOverlay*) HEAP[args[@"tileOverlay"]];
        
            // ref
            MATileOverlayRenderer* ref = (MATileOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MATileOverlayRenderer@%@::initWithTileOverlay(%@)", args[@"refId"], args[@"tileOverlay"]);
            }
        
            // invoke native method
            MATileOverlayRenderer* result = [ref initWithTileOverlay: tileOverlay];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MATileOverlayRenderer::reloadData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MATileOverlayRenderer* ref = (MATileOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MATileOverlayRenderer@%@::reloadData()", args[@"refId"]);
            }
        
            // invoke native method
            [ref reloadData ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MATraceManager::sharedInstance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MATraceManager::sharedInstance()");
            }
        
            // invoke native method
            MATraceManager* result = [MATraceManager sharedInstance];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MATraceManager::queryProcessedTraceWith_type_processingCallback_finishCallback_failedCallback": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSNumber*>* locationsRefArray = (NSArray<NSNumber*> *) args[@"locations"];
            NSMutableArray<MATraceLocation*>* locations = [NSMutableArray arrayWithCapacity:locationsRefArray.count];
            for (int __i__ = 0; __i__ < locationsRefArray.count; __i__++) {
                MATraceLocation* item = (MATraceLocation*) HEAP[[locationsRefArray objectAtIndex:__i__]];
                [locations addObject:item];
            }
            // enum arg
            AMapCoordinateType type = (AMapCoordinateType) [args[@"type"] integerValue];
        
        
        
        
            // ref
            MATraceManager* ref = (MATraceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MATraceManager@%@::queryProcessedTraceWith(%@, %@, %@, %@, %@)", args[@"refId"], args[@"locations"], args[@"type"], args[@"processingCallback"], args[@"finishCallback"], args[@"failedCallback"]);
            }
        
            // invoke native method
            NSOperation* result = [ref queryProcessedTraceWith: locations type: type processingCallback: ^(int index, NSArray<MATracePoint*>* points) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                    methodChannelWithName:@"MAProcessingCallback::Callback"
                          binaryMessenger:[[weakSelf registrar] messenger]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // primitive callback arg
                NSNumber* argindex = @(index);
                // list callback arg
                NSMutableArray<NSNumber*>* argpoints = [NSMutableArray arrayWithCapacity:points.count];
                for (int __i__ = 0; __i__ < points.count; __i__++) {
                    NSObject* item = ((NSObject*) [points objectAtIndex:__i__]);
                    // return to dart side data
                    argpoints[__i__] = [NSNumber numberWithLong: item.hash];
                    // add to HEAP
                    HEAP[[NSNumber numberWithLong: item.hash]] = item;
                }
        
                dispatch_async(dispatch_get_main_queue(), ^{
                    [channel invokeMethod:@"Callback::MAProcessingCallback::MAProcessingCallback" arguments:@{@"index": argindex, @"points": argpoints}];
                });
        
            } finishCallback: ^(NSArray<MATracePoint*>* points, double distance) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                    methodChannelWithName:@"MAFinishCallback::Callback"
                          binaryMessenger:[[weakSelf registrar] messenger]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // list callback arg
                NSMutableArray<NSNumber*>* argpoints = [NSMutableArray arrayWithCapacity:points.count];
                for (int __i__ = 0; __i__ < points.count; __i__++) {
                    NSObject* item = ((NSObject*) [points objectAtIndex:__i__]);
                    // return to dart side data
                    argpoints[__i__] = [NSNumber numberWithLong: item.hash];
                    // add to HEAP
                    HEAP[[NSNumber numberWithLong: item.hash]] = item;
                }
                // primitive callback arg
                NSNumber* argdistance = @(distance);
        
                dispatch_async(dispatch_get_main_queue(), ^{
                    [channel invokeMethod:@"Callback::MAFinishCallback::MAFinishCallback" arguments:@{@"points": argpoints, @"distance": argdistance}];
                });
        
            } failedCallback: ^(int errorCode, NSString* errorDesc) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                    methodChannelWithName:@"MAFailedCallback::Callback"
                          binaryMessenger:[[weakSelf registrar] messenger]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // primitive callback arg
                NSNumber* argerrorCode = @(errorCode);
                // jsonable callback arg
                NSString* argerrorDesc = errorDesc == nil ? [NSNull null] : errorDesc;
        
                dispatch_async(dispatch_get_main_queue(), ^{
                    [channel invokeMethod:@"Callback::MAFailedCallback::MAFailedCallback" arguments:@{@"errorCode": argerrorCode, @"errorDesc": argerrorDesc}];
                });
        
            }];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MATraceManager::startTraceWith": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MATraceManager* ref = (MATraceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MATraceManager@%@::startTraceWith(%@)", args[@"refId"], args[@"locCallback"]);
            }
        
            // invoke native method
            [ref startTraceWith : ^(NSArray<CLLocation*>* locations, NSArray<MATracePoint*>* tracePoints, double distance, NSError* error) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                    methodChannelWithName:@"MATraceLocationCallback::Callback"
                          binaryMessenger:[[weakSelf registrar] messenger]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // list callback arg
                NSMutableArray<NSNumber*>* arglocations = [NSMutableArray arrayWithCapacity:locations.count];
                for (int __i__ = 0; __i__ < locations.count; __i__++) {
                    NSObject* item = ((NSObject*) [locations objectAtIndex:__i__]);
                    // return to dart side data
                    arglocations[__i__] = [NSNumber numberWithLong: item.hash];
                    // add to HEAP
                    HEAP[[NSNumber numberWithLong: item.hash]] = item;
                }
                // list callback arg
                NSMutableArray<NSNumber*>* argtracePoints = [NSMutableArray arrayWithCapacity:tracePoints.count];
                for (int __i__ = 0; __i__ < tracePoints.count; __i__++) {
                    NSObject* item = ((NSObject*) [tracePoints objectAtIndex:__i__]);
                    // return to dart side data
                    argtracePoints[__i__] = [NSNumber numberWithLong: item.hash];
                    // add to HEAP
                    HEAP[[NSNumber numberWithLong: item.hash]] = item;
                }
                // primitive callback arg
                NSNumber* argdistance = @(distance);
                // ref callback arg
                NSNumber* argerror = [NSNull null];
                if (error != nil) {
                    argerror = [NSNumber numberWithLong: error.hash];
                    HEAP[argerror] = error;
                }
        
        
                dispatch_async(dispatch_get_main_queue(), ^{
                    [channel invokeMethod:@"Callback::MATraceLocationCallback::MATraceLocationCallback" arguments:@{@"locations": arglocations, @"tracePoints": argtracePoints, @"distance": argdistance, @"error": argerror}];
                });
        
            }];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MATraceManager::stopTrace": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MATraceManager* ref = (MATraceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MATraceManager@%@::stopTrace()", args[@"refId"]);
            }
        
            // invoke native method
            [ref stopTrace ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MATraceManager::start": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MATraceManager* ref = (MATraceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MATraceManager@%@::start()", args[@"refId"]);
            }
        
            // invoke native method
            [ref start ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MATraceManager::stop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MATraceManager* ref = (MATraceManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MATraceManager@%@::stop()", args[@"refId"]);
            }
        
            // invoke native method
            [ref stop ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMultiPointOverlayRenderer::initWithMultiPointOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAMultiPointOverlay* multiPointOverlay = (MAMultiPointOverlay*) HEAP[args[@"multiPointOverlay"]];
        
            // ref
            MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMultiPointOverlayRenderer@%@::initWithMultiPointOverlay(%@)", args[@"refId"], args[@"multiPointOverlay"]);
            }
        
            // invoke native method
            MAMultiPointOverlayRenderer* result = [ref initWithMultiPointOverlay: multiPointOverlay];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAPolylineRenderer::initWithPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAPolyline* polyline = (MAPolyline*) HEAP[args[@"polyline"]];
        
            // ref
            MAPolylineRenderer* ref = (MAPolylineRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAPolylineRenderer@%@::initWithPolyline(%@)", args[@"refId"], args[@"polyline"]);
            }
        
            // invoke native method
            MAPolylineRenderer* result = [ref initWithPolyline: polyline];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAAnnotationMoveAnimation::name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnnotationMoveAnimation@%@::name()", args[@"refId"]);
            }
        
            // invoke native method
            NSString* result = [ref name];
        
            // result
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        @"MAAnnotationMoveAnimation::coordinates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnnotationMoveAnimation@%@::coordinates()", args[@"refId"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D* result = [ref coordinates];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D*)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAAnnotationMoveAnimation::count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnnotationMoveAnimation@%@::count()", args[@"refId"]);
            }
        
            // invoke native method
            NSUInteger result = [ref count];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAAnnotationMoveAnimation::duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnnotationMoveAnimation@%@::duration()", args[@"refId"]);
            }
        
            // invoke native method
            CGFloat result = [ref duration];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAAnnotationMoveAnimation::elapsedTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnnotationMoveAnimation@%@::elapsedTime()", args[@"refId"]);
            }
        
            // invoke native method
            CGFloat result = [ref elapsedTime];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAAnnotationMoveAnimation::cancel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnnotationMoveAnimation@%@::cancel()", args[@"refId"]);
            }
        
            // invoke native method
            [ref cancel ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAAnnotationMoveAnimation::isCancelled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnnotationMoveAnimation@%@::isCancelled()", args[@"refId"]);
            }
        
            // invoke native method
            BOOL result = [ref isCancelled];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAAnnotationMoveAnimation::passedPointCount": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAAnnotationMoveAnimation* ref = (MAAnnotationMoveAnimation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnnotationMoveAnimation@%@::passedPointCount()", args[@"refId"]);
            }
        
            // invoke native method
            NSInteger result = [ref passedPointCount];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAAnnotationView::setSelected_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            BOOL selected = [args[@"selected"] boolValue];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnnotationView@%@::setSelected(%@, %@)", args[@"refId"], args[@"selected"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setSelected : selected animated: animated];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAAnnotationView::initWithAnnotation_reuseIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[args[@"annotation"]];
            // jsonable arg
            NSString* reuseIdentifier = (NSString*) args[@"reuseIdentifier"];
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnnotationView@%@::initWithAnnotation(%@, %@)", args[@"refId"], args[@"annotation"], args[@"reuseIdentifier"]);
            }
        
            // invoke native method
            id result = [ref initWithAnnotation: annotation reuseIdentifier: reuseIdentifier];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: ((NSObject*) result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: ((NSObject*) result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAAnnotationView::prepareForReuse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnnotationView@%@::prepareForReuse()", args[@"refId"]);
            }
        
            // invoke native method
            [ref prepareForReuse ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAAnnotationView::setDragState_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // enum arg
            MAAnnotationViewDragState newDragState = (MAAnnotationViewDragState) [args[@"newDragState"] integerValue];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAAnnotationView@%@::setDragState(%@, %@)", args[@"refId"], args[@"newDragState"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setDragState : newDragState animated: animated];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MATileOverlay::initWithURLTemplate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* URLTemplate = (NSString*) args[@"URLTemplate"];
        
            // ref
            MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MATileOverlay@%@::initWithURLTemplate(%@)", args[@"refId"], args[@"URLTemplate"]);
            }
        
            // invoke native method
            id result = [ref initWithURLTemplate: URLTemplate];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: ((NSObject*) result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: ((NSObject*) result).hash];
        
            methodResult(jsonableResult);
        },
        @"MATileOverlay::loadTileAtPath_result": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pathValue = (NSValue*) HEAP[args[@"path"]];
            MATileOverlayPath path;
            [pathValue getValue:&path];
        
        
            // ref
            MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MATileOverlay@%@::loadTileAtPath(%@, %@)", args[@"refId"], args[@"path"], args[@"result"]);
            }
        
            // invoke native method
            [ref loadTileAtPath : path result: ^(NSData* tileData, NSError* error) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                    methodChannelWithName:@"void|NSData*#tileData,NSError*#error::Callback"
                          binaryMessenger:[[weakSelf registrar] messenger]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // ref callback arg
                NSNumber* argtileData = [NSNull null];
                if (tileData != nil) {
                    argtileData = [NSNumber numberWithLong: tileData.hash];
                    HEAP[argtileData] = tileData;
                }
        
                // ref callback arg
                NSNumber* argerror = [NSNull null];
                if (error != nil) {
                    argerror = [NSNumber numberWithLong: error.hash];
                    HEAP[argerror] = error;
                }
        
        
                dispatch_async(dispatch_get_main_queue(), ^{
                    [channel invokeMethod:@"Callback::void|NSData*#tileData,NSError*#error::void|NSData*#tileData,NSError*#error" arguments:@{@"tileData": argtileData, @"error": argerror}];
                });
        
            }];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MATileOverlay::cancelLoadOfTileAtPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pathValue = (NSValue*) HEAP[args[@"path"]];
            MATileOverlayPath path;
            [pathValue getValue:&path];
        
            // ref
            MATileOverlay* ref = (MATileOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MATileOverlay@%@::cancelLoadOfTileAtPath(%@)", args[@"refId"], args[@"path"]);
            }
        
            // invoke native method
            [ref cancelLoadOfTileAtPath : path];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MACustomCalloutView::initWithCustomView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            UIView* customView = (UIView*) HEAP[args[@"customView"]];
        
            // ref
            MACustomCalloutView* ref = (MACustomCalloutView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACustomCalloutView@%@::initWithCustomView(%@)", args[@"refId"], args[@"customView"]);
            }
        
            // invoke native method
            id result = [ref initWithCustomView: customView];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: ((NSObject*) result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: ((NSObject*) result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAOfflineMap::sharedOfflineMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOfflineMap::sharedOfflineMap()");
            }
        
            // invoke native method
            MAOfflineMap* result = [MAOfflineMap sharedOfflineMap];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAOfflineMap::setupWithCompletionBlock": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOfflineMap@%@::setupWithCompletionBlock(%@)", args[@"refId"], args[@"block"]);
            }
        
            // invoke native method
            [ref setupWithCompletionBlock : ^(BOOL setupSuccess) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                    methodChannelWithName:@"void|BOOL#setupSuccess::Callback"
                          binaryMessenger:[[weakSelf registrar] messenger]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // primitive callback arg
                NSNumber* argsetupSuccess = @(setupSuccess);
        
                dispatch_async(dispatch_get_main_queue(), ^{
                    [channel invokeMethod:@"Callback::void|BOOL#setupSuccess::void|BOOL#setupSuccess" arguments:@{@"setupSuccess": argsetupSuccess}];
                });
        
            }];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOfflineMap::downloadItem_shouldContinueWhenAppEntersBackground_downloadBlock": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAOfflineItem* item = (MAOfflineItem*) HEAP[args[@"item"]];
            // jsonable arg
            BOOL shouldContinueWhenAppEntersBackground = [args[@"shouldContinueWhenAppEntersBackground"] boolValue];
        
        
            // ref
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOfflineMap@%@::downloadItem(%@, %@, %@)", args[@"refId"], args[@"item"], args[@"shouldContinueWhenAppEntersBackground"], args[@"downloadBlock"]);
            }
        
            // invoke native method
            [ref downloadItem : item shouldContinueWhenAppEntersBackground: shouldContinueWhenAppEntersBackground downloadBlock: ^(MAOfflineItem* downloadItem, MAOfflineMapDownloadStatus downloadStatus, id info) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                    methodChannelWithName:@"MAOfflineMapDownloadBlock::Callback"
                          binaryMessenger:[[weakSelf registrar] messenger]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // ref callback arg
                NSNumber* argdownloadItem = [NSNull null];
                if (downloadItem != nil) {
                    argdownloadItem = [NSNumber numberWithLong: downloadItem.hash];
                    HEAP[argdownloadItem] = downloadItem;
                }
        
                // enum callback arg
                NSNumber* argdownloadStatus = @((NSInteger) downloadStatus);
                // ref callback arg
                NSNumber* arginfo = [NSNull null];
                if (((NSObject*) info) != nil) {
                    arginfo = [NSNumber numberWithLong: ((NSObject*) info).hash];
                    HEAP[arginfo] = ((NSObject*) info);
                }
        
        
                dispatch_async(dispatch_get_main_queue(), ^{
                    [channel invokeMethod:@"Callback::MAOfflineMapDownloadBlock::MAOfflineMapDownloadBlock" arguments:@{@"downloadItem": argdownloadItem, @"downloadStatus": argdownloadStatus, @"info": arginfo}];
                });
        
            }];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOfflineMap::isDownloadingForItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAOfflineItem* item = (MAOfflineItem*) HEAP[args[@"item"]];
        
            // ref
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOfflineMap@%@::isDownloadingForItem(%@)", args[@"refId"], args[@"item"]);
            }
        
            // invoke native method
            BOOL result = [ref isDownloadingForItem: item];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAOfflineMap::pauseItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAOfflineItem* item = (MAOfflineItem*) HEAP[args[@"item"]];
        
            // ref
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOfflineMap@%@::pauseItem(%@)", args[@"refId"], args[@"item"]);
            }
        
            // invoke native method
            BOOL result = [ref pauseItem: item];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAOfflineMap::deleteItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAOfflineItem* item = (MAOfflineItem*) HEAP[args[@"item"]];
        
            // ref
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOfflineMap@%@::deleteItem(%@)", args[@"refId"], args[@"item"]);
            }
        
            // invoke native method
            [ref deleteItem : item];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOfflineMap::cancelAll": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOfflineMap@%@::cancelAll()", args[@"refId"]);
            }
        
            // invoke native method
            [ref cancelAll ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOfflineMap::clearDisk": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOfflineMap@%@::clearDisk()", args[@"refId"]);
            }
        
            // invoke native method
            [ref clearDisk ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOfflineMap::checkNewestVersion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOfflineMap@%@::checkNewestVersion(%@)", args[@"refId"], args[@"newestVersionBlock"]);
            }
        
            // invoke native method
            [ref checkNewestVersion : ^(BOOL hasNewestVersion) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                    methodChannelWithName:@"MAOfflineMapNewestVersionBlock::Callback"
                          binaryMessenger:[[weakSelf registrar] messenger]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // primitive callback arg
                NSNumber* arghasNewestVersion = @(hasNewestVersion);
        
                dispatch_async(dispatch_get_main_queue(), ^{
                    [channel invokeMethod:@"Callback::MAOfflineMapNewestVersionBlock::MAOfflineMapNewestVersionBlock" arguments:@{@"hasNewestVersion": arghasNewestVersion}];
                });
        
            }];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOfflineMap::downloadCity_downloadBlock": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAOfflineCity* city = (MAOfflineCity*) HEAP[args[@"city"]];
        
        
            // ref
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOfflineMap@%@::downloadCity(%@, %@)", args[@"refId"], args[@"city"], args[@"downloadBlock"]);
            }
        
            // invoke native method
            [ref downloadCity : city downloadBlock: ^(MAOfflineItem* downloadItem, MAOfflineMapDownloadStatus downloadStatus, id info) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                    methodChannelWithName:@"MAOfflineMapDownloadBlock::Callback"
                          binaryMessenger:[[weakSelf registrar] messenger]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // ref callback arg
                NSNumber* argdownloadItem = [NSNull null];
                if (downloadItem != nil) {
                    argdownloadItem = [NSNumber numberWithLong: downloadItem.hash];
                    HEAP[argdownloadItem] = downloadItem;
                }
        
                // enum callback arg
                NSNumber* argdownloadStatus = @((NSInteger) downloadStatus);
                // ref callback arg
                NSNumber* arginfo = [NSNull null];
                if (((NSObject*) info) != nil) {
                    arginfo = [NSNumber numberWithLong: ((NSObject*) info).hash];
                    HEAP[arginfo] = ((NSObject*) info);
                }
        
        
                dispatch_async(dispatch_get_main_queue(), ^{
                    [channel invokeMethod:@"Callback::MAOfflineMapDownloadBlock::MAOfflineMapDownloadBlock" arguments:@{@"downloadItem": argdownloadItem, @"downloadStatus": argdownloadStatus, @"info": arginfo}];
                });
        
            }];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOfflineMap::downloadCity_shouldContinueWhenAppEntersBackground_downloadBlock": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAOfflineCity* city = (MAOfflineCity*) HEAP[args[@"city"]];
            // jsonable arg
            BOOL shouldContinueWhenAppEntersBackground = [args[@"shouldContinueWhenAppEntersBackground"] boolValue];
        
        
            // ref
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOfflineMap@%@::downloadCity(%@, %@, %@)", args[@"refId"], args[@"city"], args[@"shouldContinueWhenAppEntersBackground"], args[@"downloadBlock"]);
            }
        
            // invoke native method
            [ref downloadCity : city shouldContinueWhenAppEntersBackground: shouldContinueWhenAppEntersBackground downloadBlock: ^(MAOfflineItem* downloadItem, MAOfflineMapDownloadStatus downloadStatus, id info) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                    methodChannelWithName:@"MAOfflineMapDownloadBlock::Callback"
                          binaryMessenger:[[weakSelf registrar] messenger]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // ref callback arg
                NSNumber* argdownloadItem = [NSNull null];
                if (downloadItem != nil) {
                    argdownloadItem = [NSNumber numberWithLong: downloadItem.hash];
                    HEAP[argdownloadItem] = downloadItem;
                }
        
                // enum callback arg
                NSNumber* argdownloadStatus = @((NSInteger) downloadStatus);
                // ref callback arg
                NSNumber* arginfo = [NSNull null];
                if (((NSObject*) info) != nil) {
                    arginfo = [NSNumber numberWithLong: ((NSObject*) info).hash];
                    HEAP[arginfo] = ((NSObject*) info);
                }
        
        
                dispatch_async(dispatch_get_main_queue(), ^{
                    [channel invokeMethod:@"Callback::MAOfflineMapDownloadBlock::MAOfflineMapDownloadBlock" arguments:@{@"downloadItem": argdownloadItem, @"downloadStatus": argdownloadStatus, @"info": arginfo}];
                });
        
            }];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOfflineMap::isDownloadingForCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAOfflineCity* city = (MAOfflineCity*) HEAP[args[@"city"]];
        
            // ref
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOfflineMap@%@::isDownloadingForCity(%@)", args[@"refId"], args[@"city"]);
            }
        
            // invoke native method
            BOOL result = [ref isDownloadingForCity: city];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAOfflineMap::pause": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAOfflineCity* city = (MAOfflineCity*) HEAP[args[@"city"]];
        
            // ref
            MAOfflineMap* ref = (MAOfflineMap*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOfflineMap@%@::pause(%@)", args[@"refId"], args[@"city"]);
            }
        
            // invoke native method
            [ref pause : city];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MACircleRenderer::initWithCircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MACircle* circle = (MACircle*) HEAP[args[@"circle"]];
        
            // ref
            MACircleRenderer* ref = (MACircleRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACircleRenderer@%@::initWithCircle(%@)", args[@"refId"], args[@"circle"]);
            }
        
            // invoke native method
            MACircleRenderer* result = [ref initWithCircle: circle];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAParticleOverlayRenderer::initWithParticleOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAParticleOverlay* particleOverlay = (MAParticleOverlay*) HEAP[args[@"particleOverlay"]];
        
            // ref
            MAParticleOverlayRenderer* ref = (MAParticleOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleOverlayRenderer@%@::initWithParticleOverlay(%@)", args[@"refId"], args[@"particleOverlay"]);
            }
        
            // invoke native method
            MAParticleOverlayRenderer* result = [ref initWithParticleOverlay: particleOverlay];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"NSValue::MAMapPointValue": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            NSValue* ref = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: NSValue@%@::MAMapPointValue()", args[@"refId"]);
            }
        
            // invoke native method
            MAMapPoint result = [ref MAMapPointValue];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"NSValue::MAMapSizeValue": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            NSValue* ref = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: NSValue@%@::MAMapSizeValue()", args[@"refId"]);
            }
        
            // invoke native method
            MAMapSize result = [ref MAMapSizeValue];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapSize)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"NSValue::MAMapRectValue": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            NSValue* ref = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: NSValue@%@::MAMapRectValue()", args[@"refId"]);
            }
        
            // invoke native method
            MAMapRect result = [ref MAMapRectValue];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"NSValue::MACoordinateValue": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            NSValue* ref = (NSValue*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: NSValue@%@::MACoordinateValue()", args[@"refId"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D result = [ref MACoordinateValue];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAParticleVelocityGenerate::getX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            id<MAParticleVelocityGenerate> ref = (id<MAParticleVelocityGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleVelocityGenerate@%@::getX()", args[@"refId"]);
            }
        
            // invoke native method
            CGFloat result = [ref getX];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAParticleVelocityGenerate::getY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            id<MAParticleVelocityGenerate> ref = (id<MAParticleVelocityGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleVelocityGenerate@%@::getY()", args[@"refId"]);
            }
        
            // invoke native method
            CGFloat result = [ref getY];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAParticleVelocityGenerate::getZ": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            id<MAParticleVelocityGenerate> ref = (id<MAParticleVelocityGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleVelocityGenerate@%@::getZ()", args[@"refId"]);
            }
        
            // invoke native method
            CGFloat result = [ref getZ];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAParticleRandomVelocityGenerate::initWithBoundaryValueX1_Y1_Z1_X2_Y2_Z2": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            float x1 = [args[@"x1"] floatValue];
            // jsonable arg
            float y1 = [args[@"y1"] floatValue];
            // jsonable arg
            float z1 = [args[@"z1"] floatValue];
            // jsonable arg
            float x2 = [args[@"x2"] floatValue];
            // jsonable arg
            float y2 = [args[@"y2"] floatValue];
            // jsonable arg
            float z2 = [args[@"z2"] floatValue];
        
            // ref
            MAParticleRandomVelocityGenerate* ref = (MAParticleRandomVelocityGenerate*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleRandomVelocityGenerate@%@::initWithBoundaryValueX1(%@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"x1"], args[@"y1"], args[@"z1"], args[@"x2"], args[@"y2"], args[@"z2"]);
            }
        
            // invoke native method
            MAParticleRandomVelocityGenerate* result = [ref initWithBoundaryValueX1: x1 Y1: y1 Z1: z1 X2: x2 Y2: y2 Z2: z2];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAParticleColorGenerate::getColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            id<MAParticleColorGenerate> ref = (id<MAParticleColorGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleColorGenerate@%@::getColor()", args[@"refId"]);
            }
        
            // invoke native method
            float* result = [ref getColor];
        
            // result
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[[NSNumber numberWithLong: (resultValue).hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (resultValue).hash];
        
            methodResult(jsonableResult);
        },
        @"MAParticleRandomColorGenerate::initWithBoundaryColorR1_G1_B1_A1_R2_G2_B2_A2": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            float r1 = [args[@"r1"] floatValue];
            // jsonable arg
            float g1 = [args[@"g1"] floatValue];
            // jsonable arg
            float b1 = [args[@"b1"] floatValue];
            // jsonable arg
            float a1 = [args[@"a1"] floatValue];
            // jsonable arg
            float r2 = [args[@"r2"] floatValue];
            // jsonable arg
            float g2 = [args[@"g2"] floatValue];
            // jsonable arg
            float b2 = [args[@"b2"] floatValue];
            // jsonable arg
            float a2 = [args[@"a2"] floatValue];
        
            // ref
            MAParticleRandomColorGenerate* ref = (MAParticleRandomColorGenerate*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleRandomColorGenerate@%@::initWithBoundaryColorR1(%@, %@, %@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"r1"], args[@"g1"], args[@"b1"], args[@"a1"], args[@"r2"], args[@"g2"], args[@"b2"], args[@"a2"]);
            }
        
            // invoke native method
            MAParticleRandomColorGenerate* result = [ref initWithBoundaryColorR1: r1 G1: g1 B1: b1 A1: a1 R2: r2 G2: g2 B2: b2 A2: a2];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAParticleRotationGenerate::getRotate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            id<MAParticleRotationGenerate> ref = (id<MAParticleRotationGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleRotationGenerate@%@::getRotate()", args[@"refId"]);
            }
        
            // invoke native method
            float result = [ref getRotate];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAParticleConstantRotationGenerate::initWithRotate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            float rotate = [args[@"rotate"] floatValue];
        
            // ref
            MAParticleConstantRotationGenerate* ref = (MAParticleConstantRotationGenerate*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleConstantRotationGenerate@%@::initWithRotate(%@)", args[@"refId"], args[@"rotate"]);
            }
        
            // invoke native method
            MAParticleConstantRotationGenerate* result = [ref initWithRotate: rotate];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAParticleSizeGenerate::getSizeX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            float timeFrame = [args[@"timeFrame"] floatValue];
        
            // ref
            id<MAParticleSizeGenerate> ref = (id<MAParticleSizeGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleSizeGenerate@%@::getSizeX(%@)", args[@"refId"], args[@"timeFrame"]);
            }
        
            // invoke native method
            float result = [ref getSizeX: timeFrame];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAParticleSizeGenerate::getSizeY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            float timeFrame = [args[@"timeFrame"] floatValue];
        
            // ref
            id<MAParticleSizeGenerate> ref = (id<MAParticleSizeGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleSizeGenerate@%@::getSizeY(%@)", args[@"refId"], args[@"timeFrame"]);
            }
        
            // invoke native method
            float result = [ref getSizeY: timeFrame];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAParticleSizeGenerate::getSizeZ": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            float timeFrame = [args[@"timeFrame"] floatValue];
        
            // ref
            id<MAParticleSizeGenerate> ref = (id<MAParticleSizeGenerate>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleSizeGenerate@%@::getSizeZ(%@)", args[@"refId"], args[@"timeFrame"]);
            }
        
            // invoke native method
            float result = [ref getSizeZ: timeFrame];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAParticleCurveSizeGenerate::initWithCurveX_Y_Z": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            float x = [args[@"x"] floatValue];
            // jsonable arg
            float y = [args[@"y"] floatValue];
            // jsonable arg
            float z = [args[@"z"] floatValue];
        
            // ref
            MAParticleCurveSizeGenerate* ref = (MAParticleCurveSizeGenerate*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleCurveSizeGenerate@%@::initWithCurveX(%@, %@, %@)", args[@"refId"], args[@"x"], args[@"y"], args[@"z"]);
            }
        
            // invoke native method
            MAParticleCurveSizeGenerate* result = [ref initWithCurveX: x Y: y Z: z];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAParticleEmissionModule::initWithEmissionRate_rateTime": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            int rate = [args[@"rate"] intValue];
            // jsonable arg
            int rateTime = [args[@"rateTime"] intValue];
        
            // ref
            MAParticleEmissionModule* ref = (MAParticleEmissionModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleEmissionModule@%@::initWithEmissionRate(%@, %@)", args[@"refId"], args[@"rate"], args[@"rateTime"]);
            }
        
            // invoke native method
            MAParticleEmissionModule* result = [ref initWithEmissionRate: rate rateTime: rateTime];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAParticleShapeModule::getPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            id<MAParticleShapeModule> ref = (id<MAParticleShapeModule>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleShapeModule@%@::getPoint()", args[@"refId"]);
            }
        
            // invoke native method
            float* result = [ref getPoint];
        
            // result
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[[NSNumber numberWithLong: (resultValue).hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (resultValue).hash];
        
            methodResult(jsonableResult);
        },
        @"MAParticleShapeModule::isRatioEnable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            id<MAParticleShapeModule> ref = (id<MAParticleShapeModule>) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleShapeModule@%@::isRatioEnable()", args[@"refId"]);
            }
        
            // invoke native method
            BOOL result = [ref isRatioEnable];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAParticleSinglePointShapeModule::initWithShapeX_Y_Z_useRatio": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            float x = [args[@"x"] floatValue];
            // jsonable arg
            float y = [args[@"y"] floatValue];
            // jsonable arg
            float z = [args[@"z"] floatValue];
            // jsonable arg
            BOOL isUseRatio = [args[@"isUseRatio"] boolValue];
        
            // ref
            MAParticleSinglePointShapeModule* ref = (MAParticleSinglePointShapeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleSinglePointShapeModule@%@::initWithShapeX(%@, %@, %@, %@)", args[@"refId"], args[@"x"], args[@"y"], args[@"z"], args[@"isUseRatio"]);
            }
        
            // invoke native method
            MAParticleSinglePointShapeModule* result = [ref initWithShapeX: x Y: y Z: z useRatio: isUseRatio];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAParticleRectShapeModule::initWithLeft_top_right_bottom_useRatio": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            float left = [args[@"left"] floatValue];
            // jsonable arg
            float top = [args[@"top"] floatValue];
            // jsonable arg
            float right = [args[@"right"] floatValue];
            // jsonable arg
            float bottom = [args[@"bottom"] floatValue];
            // jsonable arg
            BOOL isUseRatio = [args[@"isUseRatio"] boolValue];
        
            // ref
            MAParticleRectShapeModule* ref = (MAParticleRectShapeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleRectShapeModule@%@::initWithLeft(%@, %@, %@, %@, %@)", args[@"refId"], args[@"left"], args[@"top"], args[@"right"], args[@"bottom"], args[@"isUseRatio"]);
            }
        
            // invoke native method
            MAParticleRectShapeModule* result = [ref initWithLeft: left top: top right: right bottom: bottom useRatio: isUseRatio];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAParticleOverLifeModule::setVelocityOverLife": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAParticleVelocityGenerate> velocity = (id<MAParticleVelocityGenerate>) HEAP[args[@"velocity"]];
        
            // ref
            MAParticleOverLifeModule* ref = (MAParticleOverLifeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleOverLifeModule@%@::setVelocityOverLife(%@)", args[@"refId"], args[@"velocity"]);
            }
        
            // invoke native method
            [ref setVelocityOverLife : velocity];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAParticleOverLifeModule::setRotationOverLife": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAParticleRotationGenerate> rotation = (id<MAParticleRotationGenerate>) HEAP[args[@"rotation"]];
        
            // ref
            MAParticleOverLifeModule* ref = (MAParticleOverLifeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleOverLifeModule@%@::setRotationOverLife(%@)", args[@"refId"], args[@"rotation"]);
            }
        
            // invoke native method
            [ref setRotationOverLife : rotation];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAParticleOverLifeModule::setSizeOverLife": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAParticleSizeGenerate> size = (id<MAParticleSizeGenerate>) HEAP[args[@"size"]];
        
            // ref
            MAParticleOverLifeModule* ref = (MAParticleOverLifeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleOverLifeModule@%@::setSizeOverLife(%@)", args[@"refId"], args[@"size"]);
            }
        
            // invoke native method
            [ref setSizeOverLife : size];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAParticleOverLifeModule::setColorOverLife": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAParticleColorGenerate> color = (id<MAParticleColorGenerate>) HEAP[args[@"color"]];
        
            // ref
            MAParticleOverLifeModule* ref = (MAParticleOverLifeModule*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleOverLifeModule@%@::setColorOverLife(%@)", args[@"refId"], args[@"color"]);
            }
        
            // invoke native method
            [ref setColorOverLife : color];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAParticleOverlayOptionsFactory::particleOverlayOptionsWithType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // enum arg
            MAParticleOverlayType particleType = (MAParticleOverlayType) [args[@"particleType"] integerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAParticleOverlayOptionsFactory::particleOverlayOptionsWithType(%@)", args[@"particleType"]);
            }
        
            // invoke native method
            NSArray<MAParticleOverlayOptions*>* result = [MAParticleOverlayOptionsFactory particleOverlayOptionsWithType: particleType];
        
            // result
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::initWithOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAOverlay> overlay = (id<MAOverlay>) HEAP[args[@"overlay"]];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::initWithOverlay(%@)", args[@"refId"], args[@"overlay"]);
            }
        
            // invoke native method
            MAOverlayRenderer* result = [ref initWithOverlay: overlay];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::getViewMatrix": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::getViewMatrix()", args[@"refId"]);
            }
        
            // invoke native method
            float* result = [ref getViewMatrix];
        
            // result
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[[NSNumber numberWithLong: (resultValue).hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (resultValue).hash];
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::getProjectionMatrix": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::getProjectionMatrix()", args[@"refId"]);
            }
        
            // invoke native method
            float* result = [ref getProjectionMatrix];
        
            // result
            // return a (value)*
            NSValue* resultValue = [NSValue valueWithPointer:result];
            HEAP[[NSNumber numberWithLong: (resultValue).hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (resultValue).hash];
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::getOffsetPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::getOffsetPoint()", args[@"refId"]);
            }
        
            // invoke native method
            MAMapPoint result = [ref getOffsetPoint];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::getMapZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::getMapZoomLevel()", args[@"refId"]);
            }
        
            // invoke native method
            CGFloat result = [ref getMapZoomLevel];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::pointForMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapPointValue = (NSValue*) HEAP[args[@"mapPoint"]];
            MAMapPoint mapPoint;
            [mapPointValue getValue:&mapPoint];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::pointForMapPoint(%@)", args[@"refId"], args[@"mapPoint"]);
            }
        
            // invoke native method
            CGPoint result = [ref pointForMapPoint: mapPoint];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::mapPointForPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[args[@"point"]];
            CGPoint point;
            [pointValue getValue:&point];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::mapPointForPoint(%@)", args[@"refId"], args[@"point"]);
            }
        
            // invoke native method
            MAMapPoint result = [ref mapPointForPoint: point];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::rectForMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) HEAP[args[@"mapRect"]];
            MAMapRect mapRect;
            [mapRectValue getValue:&mapRect];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::rectForMapRect(%@)", args[@"refId"], args[@"mapRect"]);
            }
        
            // invoke native method
            CGRect result = [ref rectForMapRect: mapRect];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGRect)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::mapRectForRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[args[@"rect"]];
            CGRect rect;
            [rectValue getValue:&rect];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::mapRectForRect(%@)", args[@"refId"], args[@"rect"]);
            }
        
            // invoke native method
            MAMapRect result = [ref mapRectForRect: rect];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::glPointForMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapPointValue = (NSValue*) HEAP[args[@"mapPoint"]];
            MAMapPoint mapPoint;
            [mapPointValue getValue:&mapPoint];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::glPointForMapPoint(%@)", args[@"refId"], args[@"mapPoint"]);
            }
        
            // invoke native method
            CGPoint result = [ref glPointForMapPoint: mapPoint];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::glPointsForMapPoints_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* mapPointsRefIdArray = (NSArray*) args[@"mapPoints"];
            MAMapPoint mapPoints[mapPointsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < mapPointsRefIdArray.count; __i__++) {
                NSValue* mapPointsValue = (NSValue*) HEAP[[mapPointsRefIdArray objectAtIndex:__i__]];
                MAMapPoint mapPointsItem;
                [mapPointsValue getValue:&mapPointsItem];
                mapPoints[__i__] = mapPointsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::glPointsForMapPoints(%@, %@)", args[@"refId"], args[@"mapPoints"], args[@"count"]);
            }
        
            // invoke native method
            CGPoint* result = [ref glPointsForMapPoints: mapPoints count: count];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint*)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::glWidthForWindowWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CGFloat windowWidth = [args[@"windowWidth"] floatValue];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::glWidthForWindowWidth(%@)", args[@"refId"], args[@"windowWidth"]);
            }
        
            // invoke native method
            CGFloat result = [ref glWidthForWindowWidth: windowWidth];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::referenceDidChange": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::referenceDidChange()", args[@"refId"]);
            }
        
            // invoke native method
            [ref referenceDidChange ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::renderLinesWithPoints_pointCount_strokeColor_lineWidth_looped": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
            CGPoint points[pointsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < pointsRefIdArray.count; __i__++) {
                NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:__i__]];
                CGPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // ref arg
            UIColor* strokeColor = (UIColor*) HEAP[args[@"strokeColor"]];
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
            // jsonable arg
            BOOL looped = [args[@"looped"] boolValue];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::renderLinesWithPoints(%@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"strokeColor"], args[@"lineWidth"], args[@"looped"]);
            }
        
            // invoke native method
            [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::renderLinesWithPoints_pointCount_strokeColor_lineWidth_looped_LineJoinType_LineCapType_lineDash": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
            CGPoint points[pointsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < pointsRefIdArray.count; __i__++) {
                NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:__i__]];
                CGPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // ref arg
            UIColor* strokeColor = (UIColor*) HEAP[args[@"strokeColor"]];
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
            // jsonable arg
            BOOL looped = [args[@"looped"] boolValue];
            // enum arg
            MALineJoinType lineJoinType = (MALineJoinType) [args[@"lineJoinType"] integerValue];
            // enum arg
            MALineCapType lineCapType = (MALineCapType) [args[@"lineCapType"] integerValue];
            // enum arg
            MALineDashType lineDash = (MALineDashType) [args[@"lineDash"] integerValue];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::renderLinesWithPoints(%@, %@, %@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"strokeColor"], args[@"lineWidth"], args[@"looped"], args[@"lineJoinType"], args[@"lineCapType"], args[@"lineDash"]);
            }
        
            // invoke native method
            [ref renderLinesWithPoints : points pointCount: pointCount strokeColor: strokeColor lineWidth: lineWidth looped: looped LineJoinType: lineJoinType LineCapType: lineCapType lineDash: lineDash];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::renderTexturedLinesWithPoints_pointCount_lineWidth_textureID_looped": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
            CGPoint points[pointsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < pointsRefIdArray.count; __i__++) {
                NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:__i__]];
                CGPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
            // jsonable arg
            GLuint textureID = [args[@"textureID"] unsignedIntegerValue];
            // jsonable arg
            BOOL looped = [args[@"looped"] boolValue];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::renderTexturedLinesWithPoints(%@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"lineWidth"], args[@"textureID"], args[@"looped"]);
            }
        
            // invoke native method
            [ref renderTexturedLinesWithPoints : points pointCount: pointCount lineWidth: lineWidth textureID: textureID looped: looped];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::renderTexturedLinesWithPoints_pointCount_lineWidth_textureIDs_drawStyleIndexes_looped": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
            CGPoint points[pointsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < pointsRefIdArray.count; __i__++) {
                NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:__i__]];
                CGPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
            // list arg
            NSArray<NSNumber*>* textureIDsRefArray = (NSArray<NSNumber*> *) args[@"textureIDs"];
            NSMutableArray<NSObject*>* textureIDs = [NSMutableArray arrayWithCapacity:textureIDsRefArray.count];
            for (int __i__ = 0; __i__ < textureIDsRefArray.count; __i__++) {
                NSObject* item = (NSObject*) HEAP[[textureIDsRefArray objectAtIndex:__i__]];
                [textureIDs addObject:item];
            }
            // list arg
            NSArray<NSNumber*>* drawStyleIndexesRefArray = (NSArray<NSNumber*> *) args[@"drawStyleIndexes"];
            NSMutableArray<NSObject*>* drawStyleIndexes = [NSMutableArray arrayWithCapacity:drawStyleIndexesRefArray.count];
            for (int __i__ = 0; __i__ < drawStyleIndexesRefArray.count; __i__++) {
                NSObject* item = (NSObject*) HEAP[[drawStyleIndexesRefArray objectAtIndex:__i__]];
                [drawStyleIndexes addObject:item];
            }
            // jsonable arg
            BOOL looped = [args[@"looped"] boolValue];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::renderTexturedLinesWithPoints(%@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"lineWidth"], args[@"textureIDs"], args[@"drawStyleIndexes"], args[@"looped"]);
            }
        
            // invoke native method
            [ref renderTexturedLinesWithPoints : points pointCount: pointCount lineWidth: lineWidth textureIDs: textureIDs drawStyleIndexes: drawStyleIndexes looped: looped];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::renderLinesWithPoints_pointCount_strokeColors_drawStyleIndexes_isGradient_lineWidth_looped_LineJoinType_LineCapType_lineDash": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
            CGPoint points[pointsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < pointsRefIdArray.count; __i__++) {
                NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:__i__]];
                CGPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // list arg
            NSArray<NSNumber*>* strokeColorsRefArray = (NSArray<NSNumber*> *) args[@"strokeColors"];
            NSMutableArray<NSObject*>* strokeColors = [NSMutableArray arrayWithCapacity:strokeColorsRefArray.count];
            for (int __i__ = 0; __i__ < strokeColorsRefArray.count; __i__++) {
                NSObject* item = (NSObject*) HEAP[[strokeColorsRefArray objectAtIndex:__i__]];
                [strokeColors addObject:item];
            }
            // list arg
            NSArray<NSNumber*>* drawStyleIndexesRefArray = (NSArray<NSNumber*> *) args[@"drawStyleIndexes"];
            NSMutableArray<NSObject*>* drawStyleIndexes = [NSMutableArray arrayWithCapacity:drawStyleIndexesRefArray.count];
            for (int __i__ = 0; __i__ < drawStyleIndexesRefArray.count; __i__++) {
                NSObject* item = (NSObject*) HEAP[[drawStyleIndexesRefArray objectAtIndex:__i__]];
                [drawStyleIndexes addObject:item];
            }
            // jsonable arg
            BOOL isGradient = [args[@"isGradient"] boolValue];
            // jsonable arg
            CGFloat lineWidth = [args[@"lineWidth"] floatValue];
            // jsonable arg
            BOOL looped = [args[@"looped"] boolValue];
            // enum arg
            MALineJoinType lineJoinType = (MALineJoinType) [args[@"lineJoinType"] integerValue];
            // enum arg
            MALineCapType lineCapType = (MALineCapType) [args[@"lineCapType"] integerValue];
            // enum arg
            MALineDashType lineDash = (MALineDashType) [args[@"lineDash"] integerValue];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::renderLinesWithPoints(%@, %@, %@, %@, %@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"strokeColors"], args[@"drawStyleIndexes"], args[@"isGradient"], args[@"lineWidth"], args[@"looped"], args[@"lineJoinType"], args[@"lineCapType"], args[@"lineDash"]);
            }
        
            // invoke native method
            [ref renderLinesWithPoints : points pointCount: pointCount strokeColors: strokeColors drawStyleIndexes: drawStyleIndexes isGradient: isGradient lineWidth: lineWidth looped: looped LineJoinType: lineJoinType LineCapType: lineCapType lineDash: lineDash];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::renderRegionWithPoints_pointCount_fillColor_usingTriangleFan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
            CGPoint points[pointsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < pointsRefIdArray.count; __i__++) {
                NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:__i__]];
                CGPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // ref arg
            UIColor* fillColor = (UIColor*) HEAP[args[@"fillColor"]];
            // jsonable arg
            BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::renderRegionWithPoints(%@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"fillColor"], args[@"usingTriangleFan"]);
            }
        
            // invoke native method
            [ref renderRegionWithPoints : points pointCount: pointCount fillColor: fillColor usingTriangleFan: usingTriangleFan];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::renderStrokedRegionWithPoints_pointCount_fillColor_strokeColor_strokeLineWidth_strokeLineJoinType_strokeLineDash_usingTriangleFan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
            CGPoint points[pointsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < pointsRefIdArray.count; __i__++) {
                NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:__i__]];
                CGPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // ref arg
            UIColor* fillColor = (UIColor*) HEAP[args[@"fillColor"]];
            // ref arg
            UIColor* strokeColor = (UIColor*) HEAP[args[@"strokeColor"]];
            // jsonable arg
            CGFloat strokeLineWidth = [args[@"strokeLineWidth"] floatValue];
            // enum arg
            MALineJoinType strokeLineJoinType = (MALineJoinType) [args[@"strokeLineJoinType"] integerValue];
            // enum arg
            MALineDashType strokeLineDash = (MALineDashType) [args[@"strokeLineDash"] integerValue];
            // jsonable arg
            BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::renderStrokedRegionWithPoints(%@, %@, %@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"fillColor"], args[@"strokeColor"], args[@"strokeLineWidth"], args[@"strokeLineJoinType"], args[@"strokeLineDash"], args[@"usingTriangleFan"]);
            }
        
            // invoke native method
            [ref renderStrokedRegionWithPoints : points pointCount: pointCount fillColor: fillColor strokeColor: strokeColor strokeLineWidth: strokeLineWidth strokeLineJoinType: strokeLineJoinType strokeLineDash: strokeLineDash usingTriangleFan: usingTriangleFan];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::renderTextureStrokedRegionWithPoints_pointCount_fillColor_strokeTineWidth_strokeTextureID_usingTriangleFan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
            CGPoint points[pointsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < pointsRefIdArray.count; __i__++) {
                NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:__i__]];
                CGPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // jsonable arg
            NSUInteger pointCount = [args[@"pointCount"] unsignedIntegerValue];
            // ref arg
            UIColor* fillColor = (UIColor*) HEAP[args[@"fillColor"]];
            // jsonable arg
            CGFloat strokeLineWidth = [args[@"strokeLineWidth"] floatValue];
            // jsonable arg
            GLuint strokeTexture = [args[@"strokeTexture"] unsignedIntegerValue];
            // jsonable arg
            BOOL usingTriangleFan = [args[@"usingTriangleFan"] boolValue];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::renderTextureStrokedRegionWithPoints(%@, %@, %@, %@, %@, %@)", args[@"refId"], args[@"points"], args[@"pointCount"], args[@"fillColor"], args[@"strokeLineWidth"], args[@"strokeTexture"], args[@"usingTriangleFan"]);
            }
        
            // invoke native method
            [ref renderTextureStrokedRegionWithPoints : points pointCount: pointCount fillColor: fillColor strokeTineWidth: strokeLineWidth strokeTextureID: strokeTexture usingTriangleFan: usingTriangleFan];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::renderIconWithTextureID_points": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            GLuint textureID = [args[@"textureID"] unsignedIntegerValue];
            // list arg struct
            NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
            CGPoint points[pointsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < pointsRefIdArray.count; __i__++) {
                NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:__i__]];
                CGPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::renderIconWithTextureID(%@, %@)", args[@"refId"], args[@"textureID"], args[@"points"]);
            }
        
            // invoke native method
            [ref renderIconWithTextureID : textureID points: points];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::renderIconWithTextureID_points_modulateColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            GLuint textureID = [args[@"textureID"] unsignedIntegerValue];
            // list arg struct
            NSArray* pointsRefIdArray = (NSArray*) args[@"points"];
            CGPoint points[pointsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < pointsRefIdArray.count; __i__++) {
                NSValue* pointsValue = (NSValue*) HEAP[[pointsRefIdArray objectAtIndex:__i__]];
                CGPoint pointsItem;
                [pointsValue getValue:&pointsItem];
                points[__i__] = pointsItem;
            }
            // ref arg
            UIColor* modulateColor = (UIColor*) HEAP[args[@"modulateColor"]];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::renderIconWithTextureID(%@, %@, %@)", args[@"refId"], args[@"textureID"], args[@"points"], args[@"modulateColor"]);
            }
        
            // invoke native method
            [ref renderIconWithTextureID : textureID points: points modulateColor: modulateColor];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::glRender": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::glRender()", args[@"refId"]);
            }
        
            // invoke native method
            [ref glRender ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::loadStrokeTextureImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            UIImage* textureImage = (UIImage*) HEAP[args[@"textureImage"]];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::loadStrokeTextureImage(%@)", args[@"refId"], args[@"textureImage"]);
            }
        
            // invoke native method
            GLuint result = [ref loadStrokeTextureImage: textureImage];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::loadTexture": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            UIImage* textureImage = (UIImage*) HEAP[args[@"textureImage"]];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::loadTexture(%@)", args[@"refId"], args[@"textureImage"]);
            }
        
            // invoke native method
            GLuint result = [ref loadTexture: textureImage];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::deleteTexture": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            GLuint textureId = [args[@"textureId"] unsignedIntegerValue];
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::deleteTexture(%@)", args[@"refId"], args[@"textureId"]);
            }
        
            // invoke native method
            [ref deleteTexture : textureId];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAOverlayRenderer::setNeedsUpdate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAOverlayRenderer* ref = (MAOverlayRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAOverlayRenderer@%@::setNeedsUpdate()", args[@"refId"]);
            }
        
            // invoke native method
            [ref setNeedsUpdate ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMultiPointOverlay::initWithMultiPointItems": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSNumber*>* itemsRefArray = (NSArray<NSNumber*> *) args[@"items"];
            NSMutableArray<MAMultiPointItem*>* items = [NSMutableArray arrayWithCapacity:itemsRefArray.count];
            for (int __i__ = 0; __i__ < itemsRefArray.count; __i__++) {
                MAMultiPointItem* item = (MAMultiPointItem*) HEAP[[itemsRefArray objectAtIndex:__i__]];
                [items addObject:item];
            }
        
            // ref
            MAMultiPointOverlay* ref = (MAMultiPointOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMultiPointOverlay@%@::initWithMultiPointItems(%@)", args[@"refId"], args[@"items"]);
            }
        
            // invoke native method
            MAMultiPointOverlay* result = [ref initWithMultiPointItems: items];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MACustomBuildingOverlayOption::optionWithCoordinates_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < coordsRefIdArray.count; __i__++) {
                NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:__i__]];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACustomBuildingOverlayOption::optionWithCoordinates(%@, %@)", args[@"coords"], args[@"count"]);
            }
        
            // invoke native method
            MACustomBuildingOverlayOption* result = [MACustomBuildingOverlayOption optionWithCoordinates: coords count: count];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MACustomBuildingOverlayOption::setOptionWithCoordinates_count": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* coordsRefIdArray = (NSArray*) args[@"coords"];
            CLLocationCoordinate2D coords[coordsRefIdArray.count];
        
            for (int __i__ = 0; __i__ < coordsRefIdArray.count; __i__++) {
                NSValue* coordsValue = (NSValue*) HEAP[[coordsRefIdArray objectAtIndex:__i__]];
                CLLocationCoordinate2D coordsItem;
                [coordsValue getValue:&coordsItem];
                coords[__i__] = coordsItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
            MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACustomBuildingOverlayOption@%@::setOptionWithCoordinates(%@, %@)", args[@"refId"], args[@"coords"], args[@"count"]);
            }
        
            // invoke native method
            BOOL result = [ref setOptionWithCoordinates: coords count: count];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MACustomBuildingOverlay::addCustomOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MACustomBuildingOverlayOption* option = (MACustomBuildingOverlayOption*) HEAP[args[@"option"]];
        
            // ref
            MACustomBuildingOverlay* ref = (MACustomBuildingOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACustomBuildingOverlay@%@::addCustomOption(%@)", args[@"refId"], args[@"option"]);
            }
        
            // invoke native method
            [ref addCustomOption : option];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MACustomBuildingOverlay::removeCustomOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MACustomBuildingOverlayOption* option = (MACustomBuildingOverlayOption*) HEAP[args[@"option"]];
        
            // ref
            MACustomBuildingOverlay* ref = (MACustomBuildingOverlay*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MACustomBuildingOverlay@%@::removeCustomOption(%@)", args[@"refId"], args[@"option"]);
            }
        
            // invoke native method
            [ref removeCustomOption : option];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAArc::arcWithStartCoordinate_passedCoordinate_endCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* startCoordinateValue = (NSValue*) HEAP[args[@"startCoordinate"]];
            CLLocationCoordinate2D startCoordinate;
            [startCoordinateValue getValue:&startCoordinate];
            // struct arg
            NSValue* passedCoordinateValue = (NSValue*) HEAP[args[@"passedCoordinate"]];
            CLLocationCoordinate2D passedCoordinate;
            [passedCoordinateValue getValue:&passedCoordinate];
            // struct arg
            NSValue* endCoordinateValue = (NSValue*) HEAP[args[@"endCoordinate"]];
            CLLocationCoordinate2D endCoordinate;
            [endCoordinateValue getValue:&endCoordinate];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAArc::arcWithStartCoordinate(%@, %@, %@)", args[@"startCoordinate"], args[@"passedCoordinate"], args[@"endCoordinate"]);
            }
        
            // invoke native method
            MAArc* result = [MAArc arcWithStartCoordinate: startCoordinate passedCoordinate: passedCoordinate endCoordinate: endCoordinate];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setRegion_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* regionValue = (NSValue*) HEAP[args[@"region"]];
            MACoordinateRegion region;
            [regionValue getValue:&region];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setRegion(%@, %@)", args[@"refId"], args[@"region"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setRegion : region animated: animated];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::regionThatFits": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* regionValue = (NSValue*) HEAP[args[@"region"]];
            MACoordinateRegion region;
            [regionValue getValue:&region];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::regionThatFits(%@)", args[@"refId"], args[@"region"]);
            }
        
            // invoke native method
            MACoordinateRegion result = [ref regionThatFits: region];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setVisibleMapRect_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) HEAP[args[@"mapRect"]];
            MAMapRect mapRect;
            [mapRectValue getValue:&mapRect];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setVisibleMapRect(%@, %@)", args[@"refId"], args[@"mapRect"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setVisibleMapRect : mapRect animated: animated];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::mapRectThatFits": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) HEAP[args[@"mapRect"]];
            MAMapRect mapRect;
            [mapRectValue getValue:&mapRect];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::mapRectThatFits(%@)", args[@"refId"], args[@"mapRect"]);
            }
        
            // invoke native method
            MAMapRect result = [ref mapRectThatFits: mapRect];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapView::mapRectThatFits_edgePadding": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) HEAP[args[@"mapRect"]];
            MAMapRect mapRect;
            [mapRectValue getValue:&mapRect];
            // struct arg
            NSValue* insetsValue = (NSValue*) HEAP[args[@"insets"]];
            UIEdgeInsets insets;
            [insetsValue getValue:&insets];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::mapRectThatFits(%@, %@)", args[@"refId"], args[@"mapRect"], args[@"insets"]);
            }
        
            // invoke native method
            MAMapRect result = [ref mapRectThatFits: mapRect edgePadding: insets];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MAMapRect)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setVisibleMapRect_edgePadding_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapRectValue = (NSValue*) HEAP[args[@"mapRect"]];
            MAMapRect mapRect;
            [mapRectValue getValue:&mapRect];
            // struct arg
            NSValue* insetsValue = (NSValue*) HEAP[args[@"insets"]];
            UIEdgeInsets insets;
            [insetsValue getValue:&insets];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setVisibleMapRect(%@, %@, %@)", args[@"refId"], args[@"mapRect"], args[@"insets"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setVisibleMapRect : mapRect edgePadding: insets animated: animated];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setCenterCoordinate_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[args[@"coordinate"]];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setCenterCoordinate(%@, %@)", args[@"refId"], args[@"coordinate"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setCenterCoordinate : coordinate animated: animated];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setZoomLevel_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setZoomLevel(%@, %@)", args[@"refId"], args[@"zoomLevel"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setZoomLevel : zoomLevel animated: animated];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setZoomLevel_atPivot_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
            // struct arg
            NSValue* pivotValue = (NSValue*) HEAP[args[@"pivot"]];
            CGPoint pivot;
            [pivotValue getValue:&pivot];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setZoomLevel(%@, %@, %@)", args[@"refId"], args[@"zoomLevel"], args[@"pivot"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setZoomLevel : zoomLevel atPivot: pivot animated: animated];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setCameraDegree_animated_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CGFloat cameraDegree = [args[@"cameraDegree"] floatValue];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
            // jsonable arg
            CFTimeInterval duration = [args[@"duration"] doubleValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setCameraDegree(%@, %@, %@)", args[@"refId"], args[@"cameraDegree"], args[@"animated"], args[@"duration"]);
            }
        
            // invoke native method
            [ref setCameraDegree : cameraDegree animated: animated duration: duration];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::getMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::getMapStatus()", args[@"refId"]);
            }
        
            // invoke native method
            MAMapStatus* result = [ref getMapStatus];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setMapStatus_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAMapStatus* status = (MAMapStatus*) HEAP[args[@"status"]];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setMapStatus(%@, %@)", args[@"refId"], args[@"status"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setMapStatus : status animated: animated];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setMapStatus_animated_duration": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAMapStatus* status = (MAMapStatus*) HEAP[args[@"status"]];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
            // jsonable arg
            CFTimeInterval duration = [args[@"duration"] doubleValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setMapStatus(%@, %@, %@)", args[@"refId"], args[@"status"], args[@"animated"], args[@"duration"]);
            }
        
            // invoke native method
            [ref setMapStatus : status animated: animated duration: duration];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setCompassImage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            UIImage* image = (UIImage*) HEAP[args[@"image"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setCompassImage(%@)", args[@"refId"], args[@"image"]);
            }
        
            // invoke native method
            [ref setCompassImage : image];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::takeSnapshotInRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[args[@"rect"]];
            CGRect rect;
            [rectValue getValue:&rect];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::takeSnapshotInRect(%@)", args[@"refId"], args[@"rect"]);
            }
        
            // invoke native method
            UIImage* result = [ref takeSnapshotInRect: rect];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapView::takeSnapshotInRect_withCompletionBlock": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[args[@"rect"]];
            CGRect rect;
            [rectValue getValue:&rect];
        
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::takeSnapshotInRect(%@, %@)", args[@"refId"], args[@"rect"], args[@"block"]);
            }
        
            // invoke native method
            [ref takeSnapshotInRect : rect withCompletionBlock: ^(UIImage* resultImage, NSInteger state) {
                FlutterMethodChannel *channel = [FlutterMethodChannel
                    methodChannelWithName:@"void|UIImage*#resultImage,NSInteger#state::Callback"
                          binaryMessenger:[[weakSelf registrar] messenger]];
        
                // print log
                if (enableLog) {
                    NSLog(@"");
                }
        
                // 构造可以直接传输的参数
                // ref callback arg
                NSNumber* argresultImage = [NSNull null];
                if (resultImage != nil) {
                    argresultImage = [NSNumber numberWithLong: resultImage.hash];
                    HEAP[argresultImage] = resultImage;
                }
        
                // primitive callback arg
                NSNumber* argstate = @(state);
        
                dispatch_async(dispatch_get_main_queue(), ^{
                    [channel invokeMethod:@"Callback::void|UIImage*#resultImage,NSInteger#state::void|UIImage*#resultImage,NSInteger#state" arguments:@{@"resultImage": argresultImage, @"state": argstate}];
                });
        
            }];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::metersPerPointForZoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::metersPerPointForZoomLevel(%@)", args[@"refId"], args[@"zoomLevel"]);
            }
        
            // invoke native method
            double result = [ref metersPerPointForZoomLevel: zoomLevel];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"MAMapView::convertCoordinate_toPointToView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[args[@"coordinate"]];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // ref arg
            UIView* view = (UIView*) HEAP[args[@"view"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::convertCoordinate(%@, %@)", args[@"refId"], args[@"coordinate"], args[@"view"]);
            }
        
            // invoke native method
            CGPoint result = [ref convertCoordinate: coordinate toPointToView: view];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapView::convertPoint_toCoordinateFromView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[args[@"point"]];
            CGPoint point;
            [pointValue getValue:&point];
            // ref arg
            UIView* view = (UIView*) HEAP[args[@"view"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::convertPoint(%@, %@)", args[@"refId"], args[@"point"], args[@"view"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D result = [ref convertPoint: point toCoordinateFromView: view];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapView::convertRegion_toRectToView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* regionValue = (NSValue*) HEAP[args[@"region"]];
            MACoordinateRegion region;
            [regionValue getValue:&region];
            // ref arg
            UIView* view = (UIView*) HEAP[args[@"view"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::convertRegion(%@, %@)", args[@"refId"], args[@"region"], args[@"view"]);
            }
        
            // invoke native method
            CGRect result = [ref convertRegion: region toRectToView: view];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGRect)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapView::convertRect_toRegionFromView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[args[@"rect"]];
            CGRect rect;
            [rectValue getValue:&rect];
            // ref arg
            UIView* view = (UIView*) HEAP[args[@"view"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::convertRect(%@, %@)", args[@"refId"], args[@"rect"], args[@"view"]);
            }
        
            // invoke native method
            MACoordinateRegion result = [ref convertRect: rect toRegionFromView: view];
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
            HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
            NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapView::reloadMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::reloadMap()", args[@"refId"]);
            }
        
            // invoke native method
            [ref reloadMap ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::clearDisk": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::clearDisk()", args[@"refId"]);
            }
        
            // invoke native method
            [ref clearDisk ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::reloadInternalTexture": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::reloadInternalTexture()", args[@"refId"]);
            }
        
            // invoke native method
            [ref reloadInternalTexture ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::mapContentApprovalNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::mapContentApprovalNumber()", args[@"refId"]);
            }
        
            // invoke native method
            NSString* result = [ref mapContentApprovalNumber];
        
            // result
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        @"MAMapView::satelliteImageApprovalNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::satelliteImageApprovalNumber()", args[@"refId"]);
            }
        
            // invoke native method
            NSString* result = [ref satelliteImageApprovalNumber];
        
            // result
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        @"MAMapView::forceRefresh": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::forceRefresh()", args[@"refId"]);
            }
        
            // invoke native method
            [ref forceRefresh ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::addAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[args[@"annotation"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::addAnnotation(%@)", args[@"refId"], args[@"annotation"]);
            }
        
            // invoke native method
            [ref addAnnotation : annotation];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::addAnnotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
            NSMutableArray<NSObject*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
            for (int __i__ = 0; __i__ < annotationsRefArray.count; __i__++) {
                NSObject* item = (NSObject*) HEAP[[annotationsRefArray objectAtIndex:__i__]];
                [annotations addObject:item];
            }
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::addAnnotations(%@)", args[@"refId"], args[@"annotations"]);
            }
        
            // invoke native method
            [ref addAnnotations : annotations];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::removeAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[args[@"annotation"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::removeAnnotation(%@)", args[@"refId"], args[@"annotation"]);
            }
        
            // invoke native method
            [ref removeAnnotation : annotation];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::removeAnnotations": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
            NSMutableArray<NSObject*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
            for (int __i__ = 0; __i__ < annotationsRefArray.count; __i__++) {
                NSObject* item = (NSObject*) HEAP[[annotationsRefArray objectAtIndex:__i__]];
                [annotations addObject:item];
            }
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::removeAnnotations(%@)", args[@"refId"], args[@"annotations"]);
            }
        
            // invoke native method
            [ref removeAnnotations : annotations];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::viewForAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[args[@"annotation"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::viewForAnnotation(%@)", args[@"refId"], args[@"annotation"]);
            }
        
            // invoke native method
            MAAnnotationView* result = [ref viewForAnnotation: annotation];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapView::dequeueReusableAnnotationViewWithIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* identifier = (NSString*) args[@"identifier"];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::dequeueReusableAnnotationViewWithIdentifier(%@)", args[@"refId"], args[@"identifier"]);
            }
        
            // invoke native method
            MAAnnotationView* result = [ref dequeueReusableAnnotationViewWithIdentifier: identifier];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapView::selectAnnotation_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[args[@"annotation"]];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::selectAnnotation(%@, %@)", args[@"refId"], args[@"annotation"], args[@"animated"]);
            }
        
            // invoke native method
            [ref selectAnnotation : annotation animated: animated];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::deselectAnnotation_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[args[@"annotation"]];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::deselectAnnotation(%@, %@)", args[@"refId"], args[@"annotation"], args[@"animated"]);
            }
        
            // invoke native method
            [ref deselectAnnotation : annotation animated: animated];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::showAnnotations_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
            NSMutableArray<NSObject*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
            for (int __i__ = 0; __i__ < annotationsRefArray.count; __i__++) {
                NSObject* item = (NSObject*) HEAP[[annotationsRefArray objectAtIndex:__i__]];
                [annotations addObject:item];
            }
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::showAnnotations(%@, %@)", args[@"refId"], args[@"annotations"], args[@"animated"]);
            }
        
            // invoke native method
            [ref showAnnotations : annotations animated: animated];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::showAnnotations_edgePadding_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSNumber*>* annotationsRefArray = (NSArray<NSNumber*> *) args[@"annotations"];
            NSMutableArray<NSObject*>* annotations = [NSMutableArray arrayWithCapacity:annotationsRefArray.count];
            for (int __i__ = 0; __i__ < annotationsRefArray.count; __i__++) {
                NSObject* item = (NSObject*) HEAP[[annotationsRefArray objectAtIndex:__i__]];
                [annotations addObject:item];
            }
            // struct arg
            NSValue* insetsValue = (NSValue*) HEAP[args[@"insets"]];
            UIEdgeInsets insets;
            [insetsValue getValue:&insets];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::showAnnotations(%@, %@, %@)", args[@"refId"], args[@"annotations"], args[@"insets"], args[@"animated"]);
            }
        
            // invoke native method
            [ref showAnnotations : annotations edgePadding: insets animated: animated];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setUserTrackingMode_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // enum arg
            MAUserTrackingMode mode = (MAUserTrackingMode) [args[@"mode"] integerValue];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setUserTrackingMode(%@, %@)", args[@"refId"], args[@"mode"], args[@"animated"]);
            }
        
            // invoke native method
            [ref setUserTrackingMode : mode animated: animated];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::updateUserLocationRepresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAUserLocationRepresentation* representation = (MAUserLocationRepresentation*) HEAP[args[@"representation"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::updateUserLocationRepresentation(%@)", args[@"refId"], args[@"representation"]);
            }
        
            // invoke native method
            [ref updateUserLocationRepresentation : representation];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::overlaysInLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // enum arg
            MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::overlaysInLevel(%@)", args[@"refId"], args[@"level"]);
            }
        
            // invoke native method
            NSArray* result = [ref overlaysInLevel: level];
        
            // result
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: [NSNumber numberWithLong: object.hash]];
                HEAP[[NSNumber numberWithLong: object.hash]] = object;
            }
        
            methodResult(jsonableResult);
        },
        @"MAMapView::addOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAOverlay> overlay = (id<MAOverlay>) HEAP[args[@"overlay"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::addOverlay(%@)", args[@"refId"], args[@"overlay"]);
            }
        
            // invoke native method
            [ref addOverlay : overlay];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::addOverlays": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
            NSMutableArray<NSObject*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
            for (int __i__ = 0; __i__ < overlaysRefArray.count; __i__++) {
                NSObject* item = (NSObject*) HEAP[[overlaysRefArray objectAtIndex:__i__]];
                [overlays addObject:item];
            }
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::addOverlays(%@)", args[@"refId"], args[@"overlays"]);
            }
        
            // invoke native method
            [ref addOverlays : overlays];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::addOverlay_level": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAOverlay> overlay = (id<MAOverlay>) HEAP[args[@"overlay"]];
            // enum arg
            MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::addOverlay(%@, %@)", args[@"refId"], args[@"overlay"], args[@"level"]);
            }
        
            // invoke native method
            [ref addOverlay : overlay level: level];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::addOverlays_level": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
            NSMutableArray<NSObject*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
            for (int __i__ = 0; __i__ < overlaysRefArray.count; __i__++) {
                NSObject* item = (NSObject*) HEAP[[overlaysRefArray objectAtIndex:__i__]];
                [overlays addObject:item];
            }
            // enum arg
            MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::addOverlays(%@, %@)", args[@"refId"], args[@"overlays"], args[@"level"]);
            }
        
            // invoke native method
            [ref addOverlays : overlays level: level];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::removeOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAOverlay> overlay = (id<MAOverlay>) HEAP[args[@"overlay"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::removeOverlay(%@)", args[@"refId"], args[@"overlay"]);
            }
        
            // invoke native method
            [ref removeOverlay : overlay];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::removeOverlays": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
            NSMutableArray<NSObject*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
            for (int __i__ = 0; __i__ < overlaysRefArray.count; __i__++) {
                NSObject* item = (NSObject*) HEAP[[overlaysRefArray objectAtIndex:__i__]];
                [overlays addObject:item];
            }
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::removeOverlays(%@)", args[@"refId"], args[@"overlays"]);
            }
        
            // invoke native method
            [ref removeOverlays : overlays];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::insertOverlay_atIndex_level": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAOverlay> overlay = (id<MAOverlay>) HEAP[args[@"overlay"]];
            // jsonable arg
            NSUInteger index = [args[@"index"] unsignedIntegerValue];
            // enum arg
            MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::insertOverlay(%@, %@, %@)", args[@"refId"], args[@"overlay"], args[@"index"], args[@"level"]);
            }
        
            // invoke native method
            [ref insertOverlay : overlay atIndex: index level: level];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::insertOverlay_aboveOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAOverlay> overlay = (id<MAOverlay>) HEAP[args[@"overlay"]];
            // ref arg
            id<MAOverlay> sibling = (id<MAOverlay>) HEAP[args[@"sibling"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::insertOverlay(%@, %@)", args[@"refId"], args[@"overlay"], args[@"sibling"]);
            }
        
            // invoke native method
            [ref insertOverlay : overlay aboveOverlay: sibling];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::insertOverlay_belowOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAOverlay> overlay = (id<MAOverlay>) HEAP[args[@"overlay"]];
            // ref arg
            id<MAOverlay> sibling = (id<MAOverlay>) HEAP[args[@"sibling"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::insertOverlay(%@, %@)", args[@"refId"], args[@"overlay"], args[@"sibling"]);
            }
        
            // invoke native method
            [ref insertOverlay : overlay belowOverlay: sibling];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::insertOverlay_atIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAOverlay> overlay = (id<MAOverlay>) HEAP[args[@"overlay"]];
            // jsonable arg
            NSUInteger index = [args[@"index"] unsignedIntegerValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::insertOverlay(%@, %@)", args[@"refId"], args[@"overlay"], args[@"index"]);
            }
        
            // invoke native method
            [ref insertOverlay : overlay atIndex: index];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::exchangeOverlayAtIndex_withOverlayAtIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSUInteger index1 = [args[@"index1"] unsignedIntegerValue];
            // jsonable arg
            NSUInteger index2 = [args[@"index2"] unsignedIntegerValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::exchangeOverlayAtIndex(%@, %@)", args[@"refId"], args[@"index1"], args[@"index2"]);
            }
        
            // invoke native method
            [ref exchangeOverlayAtIndex : index1 withOverlayAtIndex: index2];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::exchangeOverlayAtIndex_withOverlayAtIndex_atLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSUInteger index1 = [args[@"index1"] unsignedIntegerValue];
            // jsonable arg
            NSUInteger index2 = [args[@"index2"] unsignedIntegerValue];
            // enum arg
            MAOverlayLevel level = (MAOverlayLevel) [args[@"level"] integerValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::exchangeOverlayAtIndex(%@, %@, %@)", args[@"refId"], args[@"index1"], args[@"index2"], args[@"level"]);
            }
        
            // invoke native method
            [ref exchangeOverlayAtIndex : index1 withOverlayAtIndex: index2 atLevel: level];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::exchangeOverlay_withOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAOverlay> overlay1 = (id<MAOverlay>) HEAP[args[@"overlay1"]];
            // ref arg
            id<MAOverlay> overlay2 = (id<MAOverlay>) HEAP[args[@"overlay2"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::exchangeOverlay(%@, %@)", args[@"refId"], args[@"overlay1"], args[@"overlay2"]);
            }
        
            // invoke native method
            [ref exchangeOverlay : overlay1 withOverlay: overlay2];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::rendererForOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            id<MAOverlay> overlay = (id<MAOverlay>) HEAP[args[@"overlay"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::rendererForOverlay(%@)", args[@"refId"], args[@"overlay"]);
            }
        
            // invoke native method
            MAOverlayRenderer* result = [ref rendererForOverlay: overlay];
        
            // result
            // return a ref
            HEAP[[NSNumber numberWithLong: (result).hash]] = result;
            NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
        
            methodResult(jsonableResult);
        },
        @"MAMapView::showOverlays_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
            NSMutableArray<NSObject*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
            for (int __i__ = 0; __i__ < overlaysRefArray.count; __i__++) {
                NSObject* item = (NSObject*) HEAP[[overlaysRefArray objectAtIndex:__i__]];
                [overlays addObject:item];
            }
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::showOverlays(%@, %@)", args[@"refId"], args[@"overlays"], args[@"animated"]);
            }
        
            // invoke native method
            [ref showOverlays : overlays animated: animated];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::showOverlays_edgePadding_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg
            NSArray<NSNumber*>* overlaysRefArray = (NSArray<NSNumber*> *) args[@"overlays"];
            NSMutableArray<NSObject*>* overlays = [NSMutableArray arrayWithCapacity:overlaysRefArray.count];
            for (int __i__ = 0; __i__ < overlaysRefArray.count; __i__++) {
                NSObject* item = (NSObject*) HEAP[[overlaysRefArray objectAtIndex:__i__]];
                [overlays addObject:item];
            }
            // struct arg
            NSValue* insetsValue = (NSValue*) HEAP[args[@"insets"]];
            UIEdgeInsets insets;
            [insetsValue getValue:&insets];
            // jsonable arg
            BOOL animated = [args[@"animated"] boolValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::showOverlays(%@, %@, %@)", args[@"refId"], args[@"overlays"], args[@"insets"], args[@"animated"]);
            }
        
            // invoke native method
            [ref showOverlays : overlays edgePadding: insets animated: animated];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setIndoorMapControlOrigin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* originValue = (NSValue*) HEAP[args[@"origin"]];
            CGPoint origin;
            [originValue getValue:&origin];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setIndoorMapControlOrigin(%@)", args[@"refId"], args[@"origin"]);
            }
        
            // invoke native method
            [ref setIndoorMapControlOrigin : origin];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setCurrentIndoorMapFloorIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSInteger floorIndex = [args[@"floorIndex"] longValue];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setCurrentIndoorMapFloorIndex(%@)", args[@"refId"], args[@"floorIndex"]);
            }
        
            // invoke native method
            [ref setCurrentIndoorMapFloorIndex : floorIndex];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::clearIndoorMapCache": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::clearIndoorMapCache()", args[@"refId"]);
            }
        
            // invoke native method
            [ref clearIndoorMapCache ];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setCustomMapStyle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSData* customJson = (NSData*) HEAP[args[@"customJson"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setCustomMapStyle(%@)", args[@"refId"], args[@"customJson"]);
            }
        
            // invoke native method
            [ref setCustomMapStyle : customJson];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setCustomMapStyleWithWebData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            NSData* data = (NSData*) HEAP[args[@"data"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setCustomMapStyleWithWebData(%@)", args[@"refId"], args[@"data"]);
            }
        
            // invoke native method
            [ref setCustomMapStyleWithWebData : data];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setCustomTextureResourcePath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* customTextureResourcePath = (NSString*) args[@"customTextureResourcePath"];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setCustomTextureResourcePath(%@)", args[@"refId"], args[@"customTextureResourcePath"]);
            }
        
            // invoke native method
            [ref setCustomTextureResourcePath : customTextureResourcePath];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setCustomMapStyleID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* customMapStyleID = (NSString*) args[@"customMapStyleID"];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setCustomMapStyleID(%@)", args[@"refId"], args[@"customMapStyleID"]);
            }
        
            // invoke native method
            [ref setCustomMapStyleID : customMapStyleID];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"MAMapView::setCustomMapStyleOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            MAMapCustomStyleOptions* styleOptions = (MAMapCustomStyleOptions*) HEAP[args[@"styleOptions"]];
        
            // ref
            MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: MAMapView@%@::setCustomMapStyleOptions(%@)", args[@"refId"], args[@"styleOptions"]);
            }
        
            // invoke native method
            [ref setCustomMapStyleOptions : styleOptions];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
    };
}

@end
