//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler6.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapMapFluttifyPlugin (SubHandler6)
- (NSDictionary<NSString*, Handler>*) getSubHandler6 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"MAUserLocationRepresentation::set_showsAccuracyRing_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showsAccuracyRing = [args[@"showsAccuracyRing"] boolValue];
        
                // ref
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.showsAccuracyRing = showsAccuracyRing;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAUserLocationRepresentation::set_showsHeadingIndicator_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showsHeadingIndicator = [args[@"showsHeadingIndicator"] boolValue];
        
                // ref
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.showsHeadingIndicator = showsHeadingIndicator;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAUserLocationRepresentation::set_fillColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* fillColor = (UIColor*) HEAP[args[@"fillColor"]];
        
                // ref
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.fillColor = fillColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAUserLocationRepresentation::set_strokeColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* strokeColor = (UIColor*) HEAP[args[@"strokeColor"]];
        
                // ref
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.strokeColor = strokeColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAUserLocationRepresentation::set_lineWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
        
                // ref
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.lineWidth = lineWidth;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAUserLocationRepresentation::set_locationDotBgColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* locationDotBgColor = (UIColor*) HEAP[args[@"locationDotBgColor"]];
        
                // ref
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.locationDotBgColor = locationDotBgColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAUserLocationRepresentation::set_locationDotFillColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* locationDotFillColor = (UIColor*) HEAP[args[@"locationDotFillColor"]];
        
                // ref
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.locationDotFillColor = locationDotFillColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAUserLocationRepresentation::set_enablePulseAnnimation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL enablePulseAnnimation = [args[@"enablePulseAnnimation"] boolValue];
        
                // ref
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.enablePulseAnnimation = enablePulseAnnimation;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAUserLocationRepresentation::set_image_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIImage* image = (UIImage*) HEAP[args[@"image"]];
        
                // ref
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.image = image;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_mapType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                MAMapType mapType = (MAMapType) [args[@"mapType"] integerValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.mapType = mapType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_centerCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* centerCoordinateValue = (NSValue*) HEAP[args[@"centerCoordinate"]];
                CLLocationCoordinate2D centerCoordinate;
                [centerCoordinateValue getValue:&centerCoordinate];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.centerCoordinate = centerCoordinate;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_region_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* regionValue = (NSValue*) HEAP[args[@"region"]];
                MACoordinateRegion region;
                [regionValue getValue:&region];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.region = region;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_visibleMapRect_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* visibleMapRectValue = (NSValue*) HEAP[args[@"visibleMapRect"]];
                MAMapRect visibleMapRect;
                [visibleMapRectValue getValue:&visibleMapRect];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.visibleMapRect = visibleMapRect;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_limitRegion_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* limitRegionValue = (NSValue*) HEAP[args[@"limitRegion"]];
                MACoordinateRegion limitRegion;
                [limitRegionValue getValue:&limitRegion];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.limitRegion = limitRegion;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_limitMapRect_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* limitMapRectValue = (NSValue*) HEAP[args[@"limitMapRect"]];
                MAMapRect limitMapRect;
                [limitMapRectValue getValue:&limitMapRect];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.limitMapRect = limitMapRect;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_zoomLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.zoomLevel = zoomLevel;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_minZoomLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat minZoomLevel = [args[@"minZoomLevel"] floatValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.minZoomLevel = minZoomLevel;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_maxZoomLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat maxZoomLevel = [args[@"maxZoomLevel"] floatValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.maxZoomLevel = maxZoomLevel;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_rotationDegree_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat rotationDegree = [args[@"rotationDegree"] floatValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.rotationDegree = rotationDegree;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_cameraDegree_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat cameraDegree = [args[@"cameraDegree"] floatValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.cameraDegree = cameraDegree;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_zoomingInPivotsAroundAnchorPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL zoomingInPivotsAroundAnchorPoint = [args[@"zoomingInPivotsAroundAnchorPoint"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.zoomingInPivotsAroundAnchorPoint = zoomingInPivotsAroundAnchorPoint;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_zoomEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL zoomEnabled = [args[@"zoomEnabled"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.zoomEnabled = zoomEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_scrollEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL scrollEnabled = [args[@"scrollEnabled"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.scrollEnabled = scrollEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_rotateEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL rotateEnabled = [args[@"rotateEnabled"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.rotateEnabled = rotateEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_rotateCameraEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL rotateCameraEnabled = [args[@"rotateCameraEnabled"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.rotateCameraEnabled = rotateCameraEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_skyModelEnable_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL skyModelEnable = [args[@"skyModelEnable"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.skyModelEnable = skyModelEnable;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_showsBuildings_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showsBuildings = [args[@"showsBuildings"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.showsBuildings = showsBuildings;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_showsLabels_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showsLabels = [args[@"showsLabels"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.showsLabels = showsLabels;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_showTraffic_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showTraffic = [args[@"showTraffic"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.showTraffic = showTraffic;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_trafficRatio_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat trafficRatio = [args[@"trafficRatio"] floatValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.trafficRatio = trafficRatio;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_touchPOIEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL touchPOIEnabled = [args[@"touchPOIEnabled"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.touchPOIEnabled = touchPOIEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_showsCompass_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showsCompass = [args[@"showsCompass"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.showsCompass = showsCompass;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_compassOrigin_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* compassOriginValue = (NSValue*) HEAP[args[@"compassOrigin"]];
                CGPoint compassOrigin;
                [compassOriginValue getValue:&compassOrigin];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.compassOrigin = compassOrigin;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_showsScale_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showsScale = [args[@"showsScale"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.showsScale = showsScale;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_scaleOrigin_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* scaleOriginValue = (NSValue*) HEAP[args[@"scaleOrigin"]];
                CGPoint scaleOrigin;
                [scaleOriginValue getValue:&scaleOrigin];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.scaleOrigin = scaleOrigin;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_logoCenter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* logoCenterValue = (NSValue*) HEAP[args[@"logoCenter"]];
                CGPoint logoCenter;
                [logoCenterValue getValue:&logoCenter];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.logoCenter = logoCenter;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_maxRenderFrame_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSUInteger maxRenderFrame = [args[@"maxRenderFrame"] unsignedIntegerValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.maxRenderFrame = maxRenderFrame;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_isAllowDecreaseFrame_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isAllowDecreaseFrame = [args[@"isAllowDecreaseFrame"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.isAllowDecreaseFrame = isAllowDecreaseFrame;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_openGLESDisabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL openGLESDisabled = [args[@"openGLESDisabled"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.openGLESDisabled = openGLESDisabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_screenAnchor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* screenAnchorValue = (NSValue*) HEAP[args[@"screenAnchor"]];
                CGPoint screenAnchor;
                [screenAnchorValue getValue:&screenAnchor];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.screenAnchor = screenAnchor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_showsWorldMap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSNumber* showsWorldMap = (NSNumber*) args[@"showsWorldMap"];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.showsWorldMap = showsWorldMap;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_mapLanguage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSNumber* mapLanguage = (NSNumber*) args[@"mapLanguage"];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.mapLanguage = mapLanguage;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_selectedAnnotations_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // list arg
                NSArray<NSNumber*>* selectedAnnotationsRefArray = (NSArray<NSNumber*> *) args[@"selectedAnnotations"];
                NSMutableArray<NSObject*>* selectedAnnotations = [NSMutableArray arrayWithCapacity:selectedAnnotationsRefArray.count];
                for (int __i__ = 0; __i__ < selectedAnnotationsRefArray.count; __i__++) {
                    NSObject* item = (NSObject*) HEAP[[selectedAnnotationsRefArray objectAtIndex:__i__]];
                    [selectedAnnotations addObject:item];
                }
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.selectedAnnotations = selectedAnnotations;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_allowsAnnotationViewSorting_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL allowsAnnotationViewSorting = [args[@"allowsAnnotationViewSorting"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.allowsAnnotationViewSorting = allowsAnnotationViewSorting;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_showsUserLocation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showsUserLocation = [args[@"showsUserLocation"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.showsUserLocation = showsUserLocation;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_customizeUserLocationAccuracyCircleRepresentation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL customizeUserLocationAccuracyCircleRepresentation = [args[@"customizeUserLocationAccuracyCircleRepresentation"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.customizeUserLocationAccuracyCircleRepresentation = customizeUserLocationAccuracyCircleRepresentation;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_userTrackingMode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                MAUserTrackingMode userTrackingMode = (MAUserTrackingMode) [args[@"userTrackingMode"] integerValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.userTrackingMode = userTrackingMode;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_distanceFilter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CLLocationDistance distanceFilter = [args[@"distanceFilter"] doubleValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.distanceFilter = distanceFilter;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_desiredAccuracy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CLLocationAccuracy desiredAccuracy = [args[@"desiredAccuracy"] doubleValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.desiredAccuracy = desiredAccuracy;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_headingFilter_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CLLocationDegrees headingFilter = [args[@"headingFilter"] doubleValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.headingFilter = headingFilter;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_pausesLocationUpdatesAutomatically_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL pausesLocationUpdatesAutomatically = [args[@"pausesLocationUpdatesAutomatically"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.pausesLocationUpdatesAutomatically = pausesLocationUpdatesAutomatically;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_allowsBackgroundLocationUpdates_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL allowsBackgroundLocationUpdates = [args[@"allowsBackgroundLocationUpdates"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.allowsBackgroundLocationUpdates = allowsBackgroundLocationUpdates;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_showsIndoorMap_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showsIndoorMap = [args[@"showsIndoorMap"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.showsIndoorMap = showsIndoorMap;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_showsIndoorMapControl_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL showsIndoorMapControl = [args[@"showsIndoorMapControl"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.showsIndoorMapControl = showsIndoorMapControl;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAMapView::set_customMapStyleEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL customMapStyleEnabled = [args[@"customMapStyleEnabled"] boolValue];
        
                // ref
                MAMapView* ref = (MAMapView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.customMapStyleEnabled = customMapStyleEnabled;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAOverlayPathRenderer::set_fillColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* fillColor = (UIColor*) HEAP[args[@"fillColor"]];
        
                // ref
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.fillColor = fillColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAOverlayPathRenderer::set_strokeColor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                UIColor* strokeColor = (UIColor*) HEAP[args[@"strokeColor"]];
        
                // ref
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.strokeColor = strokeColor;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAOverlayPathRenderer::set_lineWidth_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat lineWidth = [args[@"lineWidth"] floatValue];
        
                // ref
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.lineWidth = lineWidth;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAOverlayPathRenderer::set_lineJoinType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                MALineJoinType lineJoinType = (MALineJoinType) [args[@"lineJoinType"] integerValue];
        
                // ref
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.lineJoinType = lineJoinType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAOverlayPathRenderer::set_lineCapType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                MALineCapType lineCapType = (MALineCapType) [args[@"lineCapType"] integerValue];
        
                // ref
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.lineCapType = lineCapType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAOverlayPathRenderer::set_miterLimit_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CGFloat miterLimit = [args[@"miterLimit"] floatValue];
        
                // ref
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.miterLimit = miterLimit;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAOverlayPathRenderer::set_lineDash_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL lineDash = [args[@"lineDash"] boolValue];
        
                // ref
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.lineDash = lineDash;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"MAOverlayPathRenderer::set_lineDashType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                MALineDashType lineDashType = (MALineDashType) [args[@"lineDashType"] integerValue];
        
                // ref
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.lineDashType = lineDashType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"RefClass::isKindOfMAOfflineCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOfflineCity class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOfflineItemNationWide": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOfflineItemNationWide class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMultiPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMultiPoint class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAGroundOverlay class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAPolygonRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAPolygonRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAPinAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAPinAnnotationView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAHeatMapNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAHeatMapNode class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAHeatMapGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAHeatMapGradient class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAHeatMapTileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAHeatMapTileOverlay class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMapStatus class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAPointAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAPointAnnotation class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMACircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MACircle class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAArcRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAArcRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOfflineMapViewController": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOfflineMapViewController class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMapCustomStyleOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMapCustomStyleOptions class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAPolygon class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleOverlay class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAPolyline class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMultiColoredPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMultiColoredPolylineRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAAnimatedAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAAnimatedAnnotation class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMultiTexturePolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMultiTexturePolylineRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOfflineProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOfflineProvince class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMATileOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MATileOverlayRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOfflineItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOfflineItem class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAGeodesicPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAGeodesicPolyline class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMATouchPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MATouchPoi class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOfflineItemMunicipality": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOfflineItemMunicipality class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMultiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMultiPolyline class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMATraceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MATraceManager class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMultiPointOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMultiPointOverlayRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAIndoorFloorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAIndoorFloorInfo class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAIndoorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAIndoorInfo class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAPolylineRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAAnnotationMoveAnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAAnnotationMoveAnimation class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAShape": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAShape class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAAnnotationView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMATileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MATileOverlay class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMACustomCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MACustomCalloutView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOfflineItemCommonCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOfflineItemCommonCity class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOfflineMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOfflineMap class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMACircleRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MACircleRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleOverlayRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfNSValue": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[NSValue class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleRandomVelocityGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleRandomVelocityGenerate class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleRandomColorGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleRandomColorGenerate class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleConstantRotationGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleConstantRotationGenerate class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleCurveSizeGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleCurveSizeGenerate class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleEmissionModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleEmissionModule class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleSinglePointShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleSinglePointShapeModule class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleRectShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleRectShapeModule class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleOverLifeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleOverLifeModule class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleOverlayOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleOverlayOptions class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAParticleOverlayOptionsFactory": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAParticleOverlayOptionsFactory class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOverlayRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAUserLocation class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMultiPointItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMultiPointItem class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMultiPointOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMultiPointOverlay class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMACustomBuildingOverlayOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MACustomBuildingOverlayOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMACustomBuildingOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MACustomBuildingOverlay class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMATracePoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MATracePoint class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMATraceLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MATraceLocation class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAArc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAArc class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAUserLocationRepresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAUserLocationRepresentation class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAMapView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAMapView class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAOverlayPathRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAOverlayPathRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMAGroundOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MAGroundOverlayRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfMACustomBuildingOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[MACustomBuildingOverlayRenderer class]];
            methodResult(@(isTargetType));
        },
        
        @"ObjectFactory::createMAOfflineCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineCity");
            }
        
            MAOfflineCity* ref = [[MAOfflineCity alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineItemNationWide": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineItemNationWide");
            }
        
            MAOfflineItemNationWide* ref = [[MAOfflineItemNationWide alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiPoint");
            }
        
            MAMultiPoint* ref = [[MAMultiPoint alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAGroundOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAGroundOverlay");
            }
        
            MAGroundOverlay* ref = [[MAGroundOverlay alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPolygonRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPolygonRenderer");
            }
        
            MAPolygonRenderer* ref = [[MAPolygonRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPinAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPinAnnotationView");
            }
        
            MAPinAnnotationView* ref = [[MAPinAnnotationView alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAHeatMapNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAHeatMapNode");
            }
        
            MAHeatMapNode* ref = [[MAHeatMapNode alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAHeatMapGradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAHeatMapGradient");
            }
        
            MAHeatMapGradient* ref = [[MAHeatMapGradient alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAHeatMapTileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAHeatMapTileOverlay");
            }
        
            MAHeatMapTileOverlay* ref = [[MAHeatMapTileOverlay alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapStatus": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapStatus");
            }
        
            MAMapStatus* ref = [[MAMapStatus alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPointAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPointAnnotation");
            }
        
            MAPointAnnotation* ref = [[MAPointAnnotation alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACircle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACircle");
            }
        
            MACircle* ref = [[MACircle alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAArcRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAArcRenderer");
            }
        
            MAArcRenderer* ref = [[MAArcRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineMapViewController": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineMapViewController");
            }
        
            MAOfflineMapViewController* ref = [[MAOfflineMapViewController alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapCustomStyleOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapCustomStyleOptions");
            }
        
            MAMapCustomStyleOptions* ref = [[MAMapCustomStyleOptions alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPolygon");
            }
        
            MAPolygon* ref = [[MAPolygon alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleOverlay");
            }
        
            MAParticleOverlay* ref = [[MAParticleOverlay alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPolyline");
            }
        
            MAPolyline* ref = [[MAPolyline alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiColoredPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiColoredPolylineRenderer");
            }
        
            MAMultiColoredPolylineRenderer* ref = [[MAMultiColoredPolylineRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAAnimatedAnnotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAAnimatedAnnotation");
            }
        
            MAAnimatedAnnotation* ref = [[MAAnimatedAnnotation alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiTexturePolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiTexturePolylineRenderer");
            }
        
            MAMultiTexturePolylineRenderer* ref = [[MAMultiTexturePolylineRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineProvince": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineProvince");
            }
        
            MAOfflineProvince* ref = [[MAOfflineProvince alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATileOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATileOverlayRenderer");
            }
        
            MATileOverlayRenderer* ref = [[MATileOverlayRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineItem");
            }
        
            MAOfflineItem* ref = [[MAOfflineItem alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAGeodesicPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAGeodesicPolyline");
            }
        
            MAGeodesicPolyline* ref = [[MAGeodesicPolyline alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATouchPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATouchPoi");
            }
        
            MATouchPoi* ref = [[MATouchPoi alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineItemMunicipality": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineItemMunicipality");
            }
        
            MAOfflineItemMunicipality* ref = [[MAOfflineItemMunicipality alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiPolyline");
            }
        
            MAMultiPolyline* ref = [[MAMultiPolyline alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATraceManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATraceManager");
            }
        
            MATraceManager* ref = [[MATraceManager alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiPointOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiPointOverlayRenderer");
            }
        
            MAMultiPointOverlayRenderer* ref = [[MAMultiPointOverlayRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAIndoorFloorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAIndoorFloorInfo");
            }
        
            MAIndoorFloorInfo* ref = [[MAIndoorFloorInfo alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAIndoorInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAIndoorInfo");
            }
        
            MAIndoorInfo* ref = [[MAIndoorInfo alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAPolylineRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAPolylineRenderer");
            }
        
            MAPolylineRenderer* ref = [[MAPolylineRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAAnnotationMoveAnimation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAAnnotationMoveAnimation");
            }
        
            MAAnnotationMoveAnimation* ref = [[MAAnnotationMoveAnimation alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAShape": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAShape");
            }
        
            MAShape* ref = [[MAShape alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAAnnotationView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAAnnotationView");
            }
        
            MAAnnotationView* ref = [[MAAnnotationView alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATileOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATileOverlay");
            }
        
            MATileOverlay* ref = [[MATileOverlay alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATileOverlayPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATileOverlayPath");
            }
        
            MATileOverlayPath data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MATileOverlayPath)];
            HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
            methodResult([NSNumber numberWithLong: dataValue.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACustomCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACustomCalloutView");
            }
        
            MACustomCalloutView* ref = [[MACustomCalloutView alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineItemCommonCity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineItemCommonCity");
            }
        
            MAOfflineItemCommonCity* ref = [[MAOfflineItemCommonCity alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOfflineMap": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOfflineMap");
            }
        
            MAOfflineMap* ref = [[MAOfflineMap alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACircleRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACircleRenderer");
            }
        
            MACircleRenderer* ref = [[MACircleRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleOverlayRenderer");
            }
        
            MAParticleOverlayRenderer* ref = [[MAParticleOverlayRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACoordinateBounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACoordinateBounds");
            }
        
            MACoordinateBounds data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateBounds)];
            HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
            methodResult([NSNumber numberWithLong: dataValue.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACoordinateSpan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACoordinateSpan");
            }
        
            MACoordinateSpan data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateSpan)];
            HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
            methodResult([NSNumber numberWithLong: dataValue.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACoordinateRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACoordinateRegion");
            }
        
            MACoordinateRegion data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MACoordinateRegion)];
            HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
            methodResult([NSNumber numberWithLong: dataValue.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapPoint");
            }
        
            MAMapPoint data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapPoint)];
            HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
            methodResult([NSNumber numberWithLong: dataValue.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapSize");
            }
        
            MAMapSize data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapSize)];
            HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
            methodResult([NSNumber numberWithLong: dataValue.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapRect");
            }
        
            MAMapRect data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(MAMapRect)];
            HEAP[[NSNumber numberWithLong: dataValue.hash]] = dataValue;
        
            methodResult([NSNumber numberWithLong: dataValue.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleRandomVelocityGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleRandomVelocityGenerate");
            }
        
            MAParticleRandomVelocityGenerate* ref = [[MAParticleRandomVelocityGenerate alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleRandomColorGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleRandomColorGenerate");
            }
        
            MAParticleRandomColorGenerate* ref = [[MAParticleRandomColorGenerate alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleConstantRotationGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleConstantRotationGenerate");
            }
        
            MAParticleConstantRotationGenerate* ref = [[MAParticleConstantRotationGenerate alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleCurveSizeGenerate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleCurveSizeGenerate");
            }
        
            MAParticleCurveSizeGenerate* ref = [[MAParticleCurveSizeGenerate alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleEmissionModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleEmissionModule");
            }
        
            MAParticleEmissionModule* ref = [[MAParticleEmissionModule alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleSinglePointShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleSinglePointShapeModule");
            }
        
            MAParticleSinglePointShapeModule* ref = [[MAParticleSinglePointShapeModule alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleRectShapeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleRectShapeModule");
            }
        
            MAParticleRectShapeModule* ref = [[MAParticleRectShapeModule alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleOverLifeModule": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleOverLifeModule");
            }
        
            MAParticleOverLifeModule* ref = [[MAParticleOverLifeModule alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleOverlayOptions": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleOverlayOptions");
            }
        
            MAParticleOverlayOptions* ref = [[MAParticleOverlayOptions alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAParticleOverlayOptionsFactory": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAParticleOverlayOptionsFactory");
            }
        
            MAParticleOverlayOptionsFactory* ref = [[MAParticleOverlayOptionsFactory alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAOverlayRenderer": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAOverlayRenderer");
            }
        
            MAOverlayRenderer* ref = [[MAOverlayRenderer alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAUserLocation");
            }
        
            MAUserLocation* ref = [[MAUserLocation alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiPointItem": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiPointItem");
            }
        
            MAMultiPointItem* ref = [[MAMultiPointItem alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMultiPointOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMultiPointOverlay");
            }
        
            MAMultiPointOverlay* ref = [[MAMultiPointOverlay alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACustomBuildingOverlayOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACustomBuildingOverlayOption");
            }
        
            MACustomBuildingOverlayOption* ref = [[MACustomBuildingOverlayOption alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMACustomBuildingOverlay": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMACustomBuildingOverlay");
            }
        
            MACustomBuildingOverlay* ref = [[MACustomBuildingOverlay alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATracePoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATracePoint");
            }
        
            MATracePoint* ref = [[MATracePoint alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMATraceLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMATraceLocation");
            }
        
            MATraceLocation* ref = [[MATraceLocation alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAArc": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAArc");
            }
        
            MAArc* ref = [[MAArc alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAUserLocationRepresentation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAUserLocationRepresentation");
            }
        
            MAUserLocationRepresentation* ref = [[MAUserLocationRepresentation alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createMAMapView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createMAMapView");
            }
        
            MAMapView* ref = [[MAMapView alloc] init];
            HEAP[[NSNumber numberWithLong: ref.hash]] = ref;
        
            methodResult([NSNumber numberWithLong: ref.hash]);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
    };
}

@end
