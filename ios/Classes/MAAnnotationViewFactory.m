//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "MAAnnotationViewFactory.h"
#import "AmapMapFluttifyPlugin.h"
#import <objc/runtime.h>

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation MAAnnotationViewFactory {
}

- (instancetype)initWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
  }

  return self;
}

- (NSObject <FlutterPlatformView> *)createWithFrame:(CGRect)frame viewIdentifier:(int64_t)viewId arguments:(id _Nullable)args {
  return [[MAAnnotationViewPlatformView alloc] initWithViewId:viewId frame: frame registrar:_registrar];
}

@end

@implementation MAAnnotationViewPlatformView {
  int64_t _viewId;
  CGRect _frame;
  NSDictionary<NSString *, Handler>* _handlerMap;
  MAAnnotationView* _view;
}

- (instancetype)initWithViewId:(int64_t)viewId frame:(CGRect)frame registrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  self = [super init];
  if (self) {
    _viewId = viewId;
    _registrar = registrar;
    _frame = frame;
  }

  return self;
}

- (UIView *)view {
  __weak __typeof(self)weakSelf = self;
  if (_view == nil) {
    _view = [[MAAnnotationView alloc] initWithFrame:_frame];
    // 这里用一个magic number调整一下id
    HEAP[@(2147483647 - _viewId)] = _view;
  }

  //region method call handler
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"me.yohom/amap_map_fluttify/MAAnnotationView"
            binaryMessenger:[_registrar messenger]];

  [channel setMethodCallHandler:^(FlutterMethodCall *methodCall, FlutterResult methodResult) {
    NSDictionary<NSString *, id> *args = (NSDictionary<NSString *, id> *) [methodCall arguments];

    __strong __typeof(weakSelf) strongSelf = weakSelf;
    if (strongSelf != nil && strongSelf->_handlerMap[methodCall.method] != nil) {
      strongSelf->_handlerMap[methodCall.method](strongSelf->_registrar, args, methodResult);
    } else {
      methodResult(FlutterMethodNotImplemented);
    }
  }];
  //endregion

  //region handlers
  _handlerMap = @{
      @"MAAnnotationView::setSelected_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL selected = [args[@"selected"] boolValue];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotationView@%@::setSelected(%@, %@)", args[@"refId"], args[@"selected"], args[@"animated"]);
          }
      
          // invoke native method
          [ref setSelected : selected animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAAnnotationView::initWithAnnotation_reuseIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // ref arg
          id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[args[@"annotation"]];
          // jsonable arg
          NSString* reuseIdentifier = (NSString*) args[@"reuseIdentifier"];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotationView@%@::initWithAnnotation(%@, %@)", args[@"refId"], args[@"annotation"], args[@"reuseIdentifier"]);
          }
      
          // invoke native method
          id result = [ref initWithAnnotation: annotation reuseIdentifier: reuseIdentifier];
      
          // result
          // return a ref
          HEAP[[NSNumber numberWithLong: ((NSObject*) result).hash]] = result;
          NSNumber* jsonableResult = [NSNumber numberWithLong: ((NSObject*) result).hash];
      
          methodResult(jsonableResult);
      },
      @"MAAnnotationView::prepareForReuse": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
      
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotationView@%@::prepareForReuse()", args[@"refId"]);
          }
      
          // invoke native method
          [ref prepareForReuse ];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAAnnotationView::setDragState_animated": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // args
          // enum arg
          MAAnnotationViewDragState newDragState = (MAAnnotationViewDragState) [args[@"newDragState"] integerValue];
          // jsonable arg
          BOOL animated = [args[@"animated"] boolValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: MAAnnotationView@%@::setDragState(%@, %@)", args[@"refId"], args[@"newDragState"], args[@"animated"]);
          }
      
          // invoke native method
          [ref setDragState : newDragState animated: animated];
      
          // result
          // 无返回值
          NSString* jsonableResult = @"success";
      
          methodResult(jsonableResult);
      },
      @"MAAnnotationView::get_reuseIdentifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_reuseIdentifier");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // invoke native method
          NSString* result = ref.reuseIdentifier;
      
          // 返回值: jsonable
          id jsonableResult = result;
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_zIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_zIndex");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // invoke native method
          NSInteger result = ref.zIndex;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_annotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_annotation");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // invoke native method
          id<MAAnnotation> result = ref.annotation;
      
          // return a ref
          HEAP[[NSNumber numberWithLong: (result).hash]] = result;
          NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_image": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_image");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // invoke native method
          UIImage* result = ref.image;
      
          // return a ref
          HEAP[[NSNumber numberWithLong: (result).hash]] = result;
          NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_customCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_customCalloutView");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // invoke native method
          MACustomCalloutView* result = ref.customCalloutView;
      
          // return a ref
          HEAP[[NSNumber numberWithLong: (result).hash]] = result;
          NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_centerOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_centerOffset");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // invoke native method
          CGPoint result = ref.centerOffset;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
          NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_calloutOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_calloutOffset");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // invoke native method
          CGPoint result = ref.calloutOffset;
      
          // 返回值: 结构体
          NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
          HEAP[[NSNumber numberWithLong: resultValue.hash]] = resultValue;
          NSNumber* jsonableResult = [NSNumber numberWithLong: resultValue.hash];
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_isEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_isEnabled");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // invoke native method
          BOOL result = ref.enabled;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_isHighlighted": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_isHighlighted");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // invoke native method
          BOOL result = ref.highlighted;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_isSelected": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_isSelected");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // invoke native method
          BOOL result = ref.selected;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_canShowCallout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_canShowCallout");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // invoke native method
          BOOL result = ref.canShowCallout;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_leftCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_leftCalloutAccessoryView");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // invoke native method
          UIView* result = ref.leftCalloutAccessoryView;
      
          // return a ref
          HEAP[[NSNumber numberWithLong: (result).hash]] = result;
          NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_rightCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_rightCalloutAccessoryView");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // invoke native method
          UIView* result = ref.rightCalloutAccessoryView;
      
          // return a ref
          HEAP[[NSNumber numberWithLong: (result).hash]] = result;
          NSNumber* jsonableResult = [NSNumber numberWithLong: (result).hash];
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_isDraggable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_isDraggable");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // invoke native method
          BOOL result = ref.draggable;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::get_dragState": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::get_dragState");
          }
      
          // ref object
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          // invoke native method
          MAAnnotationViewDragState result = ref.dragState;
      
          // 返回值: Value
          id jsonableResult = @(result);
      
          methodResult(jsonableResult);
      },
      
      @"MAAnnotationView::set_zIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_zIndex");
          }
      
          // args
          // jsonable arg
          NSInteger zIndex = [args[@"zIndex"] longValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.zIndex = zIndex;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_annotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_annotation");
          }
      
          // args
          // ref arg
          id<MAAnnotation> annotation = (id<MAAnnotation>) HEAP[args[@"annotation"]];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.annotation = annotation;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_image": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_image");
          }
      
          // args
          // ref arg
          UIImage* image = (UIImage*) HEAP[args[@"image"]];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.image = image;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_customCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_customCalloutView");
          }
      
          // args
          // ref arg
          MACustomCalloutView* customCalloutView = (MACustomCalloutView*) HEAP[args[@"customCalloutView"]];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.customCalloutView = customCalloutView;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_centerOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_centerOffset");
          }
      
          // args
          // struct arg
          NSValue* centerOffsetValue = (NSValue*) HEAP[args[@"centerOffset"]];
          CGPoint centerOffset;
          [centerOffsetValue getValue:&centerOffset];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.centerOffset = centerOffset;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_calloutOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_calloutOffset");
          }
      
          // args
          // struct arg
          NSValue* calloutOffsetValue = (NSValue*) HEAP[args[@"calloutOffset"]];
          CGPoint calloutOffset;
          [calloutOffsetValue getValue:&calloutOffset];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.calloutOffset = calloutOffset;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_enabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_enabled");
          }
      
          // args
          // jsonable arg
          BOOL enabled = [args[@"enabled"] boolValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.enabled = enabled;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_highlighted": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_highlighted");
          }
      
          // args
          // jsonable arg
          BOOL highlighted = [args[@"highlighted"] boolValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.highlighted = highlighted;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_selected": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_selected");
          }
      
          // args
          // jsonable arg
          BOOL selected = [args[@"selected"] boolValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.selected = selected;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_canShowCallout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_canShowCallout");
          }
      
          // args
          // jsonable arg
          BOOL canShowCallout = [args[@"canShowCallout"] boolValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.canShowCallout = canShowCallout;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_leftCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_leftCalloutAccessoryView");
          }
      
          // args
          // ref arg
          UIView* leftCalloutAccessoryView = (UIView*) HEAP[args[@"leftCalloutAccessoryView"]];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.leftCalloutAccessoryView = leftCalloutAccessoryView;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_rightCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_rightCalloutAccessoryView");
          }
      
          // args
          // ref arg
          UIView* rightCalloutAccessoryView = (UIView*) HEAP[args[@"rightCalloutAccessoryView"]];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.rightCalloutAccessoryView = rightCalloutAccessoryView;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_draggable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_draggable");
          }
      
          // args
          // jsonable arg
          BOOL draggable = [args[@"draggable"] boolValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.draggable = draggable;
          methodResult(@"success");
      },
      
      @"MAAnnotationView::set_dragState": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAAnnotationView::set_dragState");
          }
      
          // args
          // enum arg
          MAAnnotationViewDragState dragState = (MAAnnotationViewDragState) [args[@"dragState"] integerValue];
      
          // ref
          MAAnnotationView* ref = (MAAnnotationView*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
      
          ref.dragState = dragState;
          methodResult(@"success");
      },
      
  };
  //endregion
  return _view;
}

//region delegate
- (void)traceManager : (MATraceManager*)manager didTrace: (NSArray<CLLocation*>*)locations correct: (NSArray<MATracePoint*>*)tracePoints distance: (double)distance withError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MATraceDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MATraceDelegate::traceManager_didTrace_correct_distance_withError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmanager = [NSNull null];
  if (manager != nil) {
      argmanager = [NSNumber numberWithLong: manager.hash];
      HEAP[argmanager] = manager;
  }
  
  // list callback arg
  NSMutableArray<NSNumber*>* arglocations = [NSMutableArray arrayWithCapacity:locations.count];
  for (int __i__ = 0; __i__ < locations.count; __i__++) {
      NSObject* item = ((NSObject*) [locations objectAtIndex:__i__]);
      // return to dart side data
      arglocations[__i__] = [NSNumber numberWithLong: item.hash];
      // add to HEAP
      HEAP[[NSNumber numberWithLong: item.hash]] = item;
  }
  // list callback arg
  NSMutableArray<NSNumber*>* argtracePoints = [NSMutableArray arrayWithCapacity:tracePoints.count];
  for (int __i__ = 0; __i__ < tracePoints.count; __i__++) {
      NSObject* item = ((NSObject*) [tracePoints objectAtIndex:__i__]);
      // return to dart side data
      argtracePoints[__i__] = [NSNumber numberWithLong: item.hash];
      // add to HEAP
      HEAP[[NSNumber numberWithLong: item.hash]] = item;
  }
  // primitive callback arg
  NSNumber* argdistance = @(distance);
  // ref callback arg
  NSNumber* argerror = [NSNull null];
  if (error != nil) {
      argerror = [NSNumber numberWithLong: error.hash];
      HEAP[argerror] = error;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MATraceDelegate::traceManager_didTrace_correct_distance_withError" arguments:@{@"manager": argmanager, @"locations": arglocations, @"tracePoints": argtracePoints, @"distance": argdistance, @"error": argerror}];
  });
  
}

- (void)mapViewRequireLocationAuth : (CLLocationManager*)locationManager
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MATraceDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MATraceDelegate::mapViewRequireLocationAuth");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* arglocationManager = [NSNull null];
  if (locationManager != nil) {
      arglocationManager = [NSNumber numberWithLong: locationManager.hash];
      HEAP[arglocationManager] = locationManager;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MATraceDelegate::mapViewRequireLocationAuth" arguments:@{@"locationManager": arglocationManager}];
  });
  
}

- (void)multiPointOverlayRenderer : (MAMultiPointOverlayRenderer*)renderer didItemTapped: (MAMultiPointItem*)item
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMultiPointOverlayRendererDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMultiPointOverlayRendererDelegate::multiPointOverlayRenderer_didItemTapped");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrenderer = [NSNull null];
  if (renderer != nil) {
      argrenderer = [NSNumber numberWithLong: renderer.hash];
      HEAP[argrenderer] = renderer;
  }
  
  // ref callback arg
  NSNumber* argitem = [NSNull null];
  if (item != nil) {
      argitem = [NSNumber numberWithLong: item.hash];
      HEAP[argitem] = item;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMultiPointOverlayRendererDelegate::multiPointOverlayRenderer_didItemTapped" arguments:@{@"renderer": argrenderer, @"item": argitem}];
  });
  
}

- (void)mapViewRegionChanged : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewRegionChanged");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewRegionChanged" arguments:@{@"mapView": argmapView}];
  });
  
}

- (void)mapView : (MAMapView*)mapView regionWillChangeAnimated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_regionWillChangeAnimated");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_regionWillChangeAnimated" arguments:@{@"mapView": argmapView, @"animated": arganimated}];
  });
  
}

- (void)mapView : (MAMapView*)mapView regionDidChangeAnimated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_regionDidChangeAnimated");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_regionDidChangeAnimated" arguments:@{@"mapView": argmapView, @"animated": arganimated}];
  });
  
}

- (void)mapView : (MAMapView*)mapView mapWillMoveByUser: (BOOL)wasUserAction
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_mapWillMoveByUser");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // primitive callback arg
  NSNumber* argwasUserAction = @(wasUserAction);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_mapWillMoveByUser" arguments:@{@"mapView": argmapView, @"wasUserAction": argwasUserAction}];
  });
  
}

- (void)mapView : (MAMapView*)mapView mapDidMoveByUser: (BOOL)wasUserAction
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_mapDidMoveByUser");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // primitive callback arg
  NSNumber* argwasUserAction = @(wasUserAction);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_mapDidMoveByUser" arguments:@{@"mapView": argmapView, @"wasUserAction": argwasUserAction}];
  });
  
}

- (void)mapView : (MAMapView*)mapView mapWillZoomByUser: (BOOL)wasUserAction
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_mapWillZoomByUser");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // primitive callback arg
  NSNumber* argwasUserAction = @(wasUserAction);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_mapWillZoomByUser" arguments:@{@"mapView": argmapView, @"wasUserAction": argwasUserAction}];
  });
  
}

- (void)mapView : (MAMapView*)mapView mapDidZoomByUser: (BOOL)wasUserAction
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_mapDidZoomByUser");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // primitive callback arg
  NSNumber* argwasUserAction = @(wasUserAction);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_mapDidZoomByUser" arguments:@{@"mapView": argmapView, @"wasUserAction": argwasUserAction}];
  });
  
}

- (void)mapViewWillStartLoadingMap : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewWillStartLoadingMap");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewWillStartLoadingMap" arguments:@{@"mapView": argmapView}];
  });
  
}

- (void)mapViewDidFinishLoadingMap : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidFinishLoadingMap");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidFinishLoadingMap" arguments:@{@"mapView": argmapView}];
  });
  
}

- (void)mapViewDidFailLoadingMap : (MAMapView*)mapView withError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidFailLoadingMap_withError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argerror = [NSNull null];
  if (error != nil) {
      argerror = [NSNumber numberWithLong: error.hash];
      HEAP[argerror] = error;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidFailLoadingMap_withError" arguments:@{@"mapView": argmapView, @"error": argerror}];
  });
  
}

- (MAAnnotationView*)mapView : (MAMapView*)mapView viewForAnnotation: (id<MAAnnotation>)annotation
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_viewForAnnotation");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argannotation = [NSNull null];
  if (annotation != nil) {
      argannotation = [NSNumber numberWithLong: annotation.hash];
      HEAP[argannotation] = annotation;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_viewForAnnotation"
                  arguments:@{}
                     result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return nil;
}

- (void)mapView : (MAMapView*)mapView didAddAnnotationViews: (NSArray*)views
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didAddAnnotationViews");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // list callback arg
  NSMutableArray<NSNumber*>* argviews = [NSMutableArray arrayWithCapacity:views.count];
  for (int __i__ = 0; __i__ < views.count; __i__++) {
      NSObject* item = ((NSObject*) [views objectAtIndex:__i__]);
      // return to dart side data
      argviews[__i__] = [NSNumber numberWithLong: item.hash];
      // add to HEAP
      HEAP[[NSNumber numberWithLong: item.hash]] = item;
  }

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didAddAnnotationViews" arguments:@{@"mapView": argmapView, @"views": argviews}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didSelectAnnotationView: (MAAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didSelectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argview = [NSNull null];
  if (view != nil) {
      argview = [NSNumber numberWithLong: view.hash];
      HEAP[argview] = view;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didSelectAnnotationView" arguments:@{@"mapView": argmapView, @"view": argview}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didDeselectAnnotationView: (MAAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didDeselectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argview = [NSNull null];
  if (view != nil) {
      argview = [NSNumber numberWithLong: view.hash];
      HEAP[argview] = view;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didDeselectAnnotationView" arguments:@{@"mapView": argmapView, @"view": argview}];
  });
  
}

- (void)mapViewWillStartLocatingUser : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewWillStartLocatingUser");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewWillStartLocatingUser" arguments:@{@"mapView": argmapView}];
  });
  
}

- (void)mapViewDidStopLocatingUser : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidStopLocatingUser");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidStopLocatingUser" arguments:@{@"mapView": argmapView}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didUpdateUserLocation: (MAUserLocation*)userLocation updatingLocation: (BOOL)updatingLocation
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didUpdateUserLocation_updatingLocation");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* arguserLocation = [NSNull null];
  if (userLocation != nil) {
      arguserLocation = [NSNumber numberWithLong: userLocation.hash];
      HEAP[arguserLocation] = userLocation;
  }
  
  // primitive callback arg
  NSNumber* argupdatingLocation = @(updatingLocation);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didUpdateUserLocation_updatingLocation" arguments:@{@"mapView": argmapView, @"userLocation": arguserLocation, @"updatingLocation": argupdatingLocation}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didFailToLocateUserWithError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didFailToLocateUserWithError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argerror = [NSNull null];
  if (error != nil) {
      argerror = [NSNumber numberWithLong: error.hash];
      HEAP[argerror] = error;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didFailToLocateUserWithError" arguments:@{@"mapView": argmapView, @"error": argerror}];
  });
  
}

- (void)mapView : (MAMapView*)mapView annotationView: (MAAnnotationView*)view didChangeDragState: (MAAnnotationViewDragState)newState fromOldState: (MAAnnotationViewDragState)oldState
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_annotationView_didChangeDragState_fromOldState");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argview = [NSNull null];
  if (view != nil) {
      argview = [NSNumber numberWithLong: view.hash];
      HEAP[argview] = view;
  }
  
  // enum callback arg
  NSNumber* argnewState = @((NSInteger) newState);
  // enum callback arg
  NSNumber* argoldState = @((NSInteger) oldState);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_annotationView_didChangeDragState_fromOldState" arguments:@{@"mapView": argmapView, @"view": argview, @"newState": argnewState, @"oldState": argoldState}];
  });
  
}

- (MAOverlayRenderer*)mapView : (MAMapView*)mapView rendererForOverlay: (id<MAOverlay>)overlay
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_rendererForOverlay");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argoverlay = [NSNull null];
  if (overlay != nil) {
      argoverlay = [NSNumber numberWithLong: overlay.hash];
      HEAP[argoverlay] = overlay;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_rendererForOverlay"
                  arguments:@{}
                     result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return nil;
}

- (void)mapView : (MAMapView*)mapView didAddOverlayRenderers: (NSArray*)overlayRenderers
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didAddOverlayRenderers");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // list callback arg
  NSMutableArray<NSNumber*>* argoverlayRenderers = [NSMutableArray arrayWithCapacity:overlayRenderers.count];
  for (int __i__ = 0; __i__ < overlayRenderers.count; __i__++) {
      NSObject* item = ((NSObject*) [overlayRenderers objectAtIndex:__i__]);
      // return to dart side data
      argoverlayRenderers[__i__] = [NSNumber numberWithLong: item.hash];
      // add to HEAP
      HEAP[[NSNumber numberWithLong: item.hash]] = item;
  }

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didAddOverlayRenderers" arguments:@{@"mapView": argmapView, @"overlayRenderers": argoverlayRenderers}];
  });
  
}

- (void)mapView : (MAMapView*)mapView annotationView: (MAAnnotationView*)view calloutAccessoryControlTapped: (UIControl*)control
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_annotationView_calloutAccessoryControlTapped");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argview = [NSNull null];
  if (view != nil) {
      argview = [NSNumber numberWithLong: view.hash];
      HEAP[argview] = view;
  }
  
  // ref callback arg
  NSNumber* argcontrol = [NSNull null];
  if (control != nil) {
      argcontrol = [NSNumber numberWithLong: control.hash];
      HEAP[argcontrol] = control;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_annotationView_calloutAccessoryControlTapped" arguments:@{@"mapView": argmapView, @"view": argview, @"control": argcontrol}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didAnnotationViewCalloutTapped: (MAAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didAnnotationViewCalloutTapped");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argview = [NSNull null];
  if (view != nil) {
      argview = [NSNumber numberWithLong: view.hash];
      HEAP[argview] = view;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didAnnotationViewCalloutTapped" arguments:@{@"mapView": argmapView, @"view": argview}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didAnnotationViewTapped: (MAAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didAnnotationViewTapped");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argview = [NSNull null];
  if (view != nil) {
      argview = [NSNumber numberWithLong: view.hash];
      HEAP[argview] = view;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didAnnotationViewTapped" arguments:@{@"mapView": argmapView, @"view": argview}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didChangeUserTrackingMode: (MAUserTrackingMode)mode animated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didChangeUserTrackingMode_animated");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // enum callback arg
  NSNumber* argmode = @((NSInteger) mode);
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didChangeUserTrackingMode_animated" arguments:@{@"mapView": argmapView, @"mode": argmode, @"animated": arganimated}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didChangeOpenGLESDisabled: (BOOL)openGLESDisabled
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didChangeOpenGLESDisabled");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // primitive callback arg
  NSNumber* argopenGLESDisabled = @(openGLESDisabled);

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didChangeOpenGLESDisabled" arguments:@{@"mapView": argmapView, @"openGLESDisabled": argopenGLESDisabled}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didTouchPois: (NSArray*)pois
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didTouchPois");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // list callback arg
  NSMutableArray<NSNumber*>* argpois = [NSMutableArray arrayWithCapacity:pois.count];
  for (int __i__ = 0; __i__ < pois.count; __i__++) {
      NSObject* item = ((NSObject*) [pois objectAtIndex:__i__]);
      // return to dart side data
      argpois[__i__] = [NSNumber numberWithLong: item.hash];
      // add to HEAP
      HEAP[[NSNumber numberWithLong: item.hash]] = item;
  }

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didTouchPois" arguments:@{@"mapView": argmapView, @"pois": argpois}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didSingleTappedAtCoordinate: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didSingleTappedAtCoordinate");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // struct callback arg
  NSValue* coordinateValue = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  NSNumber* argcoordinate = [NSNumber numberWithLong: coordinateValue.hash];
  HEAP[argcoordinate] = coordinateValue;
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didSingleTappedAtCoordinate" arguments:@{@"mapView": argmapView, @"coordinate": argcoordinate}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didLongPressedAtCoordinate: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didLongPressedAtCoordinate");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // struct callback arg
  NSValue* coordinateValue = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  NSNumber* argcoordinate = [NSNumber numberWithLong: coordinateValue.hash];
  HEAP[argcoordinate] = coordinateValue;
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didLongPressedAtCoordinate" arguments:@{@"mapView": argmapView, @"coordinate": argcoordinate}];
  });
  
}

- (void)mapInitComplete : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapInitComplete");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapInitComplete" arguments:@{@"mapView": argmapView}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didIndoorMapShowed: (MAIndoorInfo*)indoorInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didIndoorMapShowed");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argindoorInfo = [NSNull null];
  if (indoorInfo != nil) {
      argindoorInfo = [NSNumber numberWithLong: indoorInfo.hash];
      HEAP[argindoorInfo] = indoorInfo;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didIndoorMapShowed" arguments:@{@"mapView": argmapView, @"indoorInfo": argindoorInfo}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didIndoorMapFloorIndexChanged: (MAIndoorInfo*)indoorInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didIndoorMapFloorIndexChanged");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argindoorInfo = [NSNull null];
  if (indoorInfo != nil) {
      argindoorInfo = [NSNumber numberWithLong: indoorInfo.hash];
      HEAP[argindoorInfo] = indoorInfo;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didIndoorMapFloorIndexChanged" arguments:@{@"mapView": argmapView, @"indoorInfo": argindoorInfo}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didIndoorMapHidden: (MAIndoorInfo*)indoorInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didIndoorMapHidden");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  
  // ref callback arg
  NSNumber* argindoorInfo = [NSNull null];
  if (indoorInfo != nil) {
      argindoorInfo = [NSNumber numberWithLong: indoorInfo.hash];
      HEAP[argindoorInfo] = indoorInfo;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didIndoorMapHidden" arguments:@{@"mapView": argmapView, @"indoorInfo": argindoorInfo}];
  });
  
}

- (void)offlineDataWillReload : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::offlineDataWillReload");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::offlineDataWillReload" arguments:@{@"mapView": argmapView}];
  });
  
}

- (void)offlineDataDidReload : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(2147483647 - _viewId)]
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::offlineDataDidReload");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argmapView = [NSNull null];
  if (mapView != nil) {
      argmapView = [NSNumber numberWithLong: mapView.hash];
      HEAP[argmapView] = mapView;
  }
  

  dispatch_async(dispatch_get_main_queue(), ^{
      [channel invokeMethod:@"Callback::MAMapViewDelegate::offlineDataDidReload" arguments:@{@"mapView": argmapView}];
  });
  
}

//endregion

@end
